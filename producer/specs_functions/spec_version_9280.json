[{"from_block": 12217535},
    {
        "call_name": "fill_block",
        "call_args": [
            {
                "name": "ratio",
                "type": 41,
                "typeName": "Perbill",
                "docs": []
            }
        ],
        "documentation": "A dispatch that will fill the block weight up to the given ratio.",
        "module_prefix": "System",
        "module_name": "System",
        "spec_version": 9280
    },
    {
        "call_name": "remark",
        "call_args": [
            {
                "name": "remark",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Make some on-chain remark.\n\n# <weight>\n- `O(1)`\n# </weight>",
        "module_prefix": "System",
        "module_name": "System",
        "spec_version": 9280
    },
    {
        "call_name": "set_heap_pages",
        "call_args": [
            {
                "name": "pages",
                "type": 8,
                "typeName": "u64",
                "docs": []
            }
        ],
        "documentation": "Set the number of pages in the WebAssembly environment's heap.",
        "module_prefix": "System",
        "module_name": "System",
        "spec_version": 9280
    },
    {
        "call_name": "set_code",
        "call_args": [
            {
                "name": "code",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Set the new runtime code.\n\n# <weight>\n- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`\n- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is\n  expensive).\n- 1 storage write (codec `O(C)`).\n- 1 digest item.\n- 1 event.\nThe weight of this function is dependent on the runtime, but generally this is very\nexpensive. We will treat this as a full block.\n# </weight>",
        "module_prefix": "System",
        "module_name": "System",
        "spec_version": 9280
    },
    {
        "call_name": "set_code_without_checks",
        "call_args": [
            {
                "name": "code",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Set the new runtime code without doing any checks of the given `code`.\n\n# <weight>\n- `O(C)` where `C` length of `code`\n- 1 storage write (codec `O(C)`).\n- 1 digest item.\n- 1 event.\nThe weight of this function is dependent on the runtime. We will treat this as a full\nblock. # </weight>",
        "module_prefix": "System",
        "module_name": "System",
        "spec_version": 9280
    },
    {
        "call_name": "set_storage",
        "call_args": [
            {
                "name": "items",
                "type": 161,
                "typeName": "Vec<KeyValue>",
                "docs": []
            }
        ],
        "documentation": "Set some items of storage.",
        "module_prefix": "System",
        "module_name": "System",
        "spec_version": 9280
    },
    {
        "call_name": "kill_storage",
        "call_args": [
            {
                "name": "keys",
                "type": 163,
                "typeName": "Vec<Key>",
                "docs": []
            }
        ],
        "documentation": "Kill some items from storage.",
        "module_prefix": "System",
        "module_name": "System",
        "spec_version": 9280
    },
    {
        "call_name": "kill_prefix",
        "call_args": [
            {
                "name": "prefix",
                "type": 10,
                "typeName": "Key",
                "docs": []
            },
            {
                "name": "subkeys",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Kill all storage items with a key that starts with the given prefix.\n\n**NOTE:** We rely on the Root origin to provide us the number of subkeys under\nthe prefix we are removing to accurately calculate the weight of this function.",
        "module_prefix": "System",
        "module_name": "System",
        "spec_version": 9280
    },
    {
        "call_name": "remark_with_event",
        "call_args": [
            {
                "name": "remark",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Make some on-chain remark and emit event.",
        "module_prefix": "System",
        "module_name": "System",
        "spec_version": 9280
    },
    {
        "call_name": "schedule",
        "call_args": [
            {
                "name": "when",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            },
            {
                "name": "maybe_periodic",
                "type": 182,
                "typeName": "Option<schedule::Period<T::BlockNumber>>",
                "docs": []
            },
            {
                "name": "priority",
                "type": 2,
                "typeName": "schedule::Priority",
                "docs": []
            },
            {
                "name": "call",
                "type": 179,
                "typeName": "Box<CallOrHashOf<T>>",
                "docs": []
            }
        ],
        "documentation": "Anonymously schedule a task.",
        "module_prefix": "Scheduler",
        "module_name": "Scheduler",
        "spec_version": 9280
    },
    {
        "call_name": "cancel",
        "call_args": [
            {
                "name": "when",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            },
            {
                "name": "index",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Cancel an anonymously scheduled task.",
        "module_prefix": "Scheduler",
        "module_name": "Scheduler",
        "spec_version": 9280
    },
    {
        "call_name": "schedule_named",
        "call_args": [
            {
                "name": "id",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            },
            {
                "name": "when",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            },
            {
                "name": "maybe_periodic",
                "type": 182,
                "typeName": "Option<schedule::Period<T::BlockNumber>>",
                "docs": []
            },
            {
                "name": "priority",
                "type": 2,
                "typeName": "schedule::Priority",
                "docs": []
            },
            {
                "name": "call",
                "type": 179,
                "typeName": "Box<CallOrHashOf<T>>",
                "docs": []
            }
        ],
        "documentation": "Schedule a named task.",
        "module_prefix": "Scheduler",
        "module_name": "Scheduler",
        "spec_version": 9280
    },
    {
        "call_name": "cancel_named",
        "call_args": [
            {
                "name": "id",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Cancel a named scheduled task.",
        "module_prefix": "Scheduler",
        "module_name": "Scheduler",
        "spec_version": 9280
    },
    {
        "call_name": "schedule_after",
        "call_args": [
            {
                "name": "after",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            },
            {
                "name": "maybe_periodic",
                "type": 182,
                "typeName": "Option<schedule::Period<T::BlockNumber>>",
                "docs": []
            },
            {
                "name": "priority",
                "type": 2,
                "typeName": "schedule::Priority",
                "docs": []
            },
            {
                "name": "call",
                "type": 179,
                "typeName": "Box<CallOrHashOf<T>>",
                "docs": []
            }
        ],
        "documentation": "Anonymously schedule a task after a delay.\n\n# <weight>\nSame as [`schedule`].\n# </weight>",
        "module_prefix": "Scheduler",
        "module_name": "Scheduler",
        "spec_version": 9280
    },
    {
        "call_name": "schedule_named_after",
        "call_args": [
            {
                "name": "id",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            },
            {
                "name": "after",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            },
            {
                "name": "maybe_periodic",
                "type": 182,
                "typeName": "Option<schedule::Period<T::BlockNumber>>",
                "docs": []
            },
            {
                "name": "priority",
                "type": 2,
                "typeName": "schedule::Priority",
                "docs": []
            },
            {
                "name": "call",
                "type": 179,
                "typeName": "Box<CallOrHashOf<T>>",
                "docs": []
            }
        ],
        "documentation": "Schedule a named task after a delay.\n\n# <weight>\nSame as [`schedule_named`](Self::schedule_named).\n# </weight>",
        "module_prefix": "Scheduler",
        "module_name": "Scheduler",
        "spec_version": 9280
    },
    {
        "call_name": "note_preimage",
        "call_args": [
            {
                "name": "bytes",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Register a preimage on-chain.\n\nIf the preimage was previously requested, no fees or deposits are taken for providing\nthe preimage. Otherwise, a deposit is taken proportional to the size of the preimage.",
        "module_prefix": "Preimage",
        "module_name": "Preimage",
        "spec_version": 9280
    },
    {
        "call_name": "unnote_preimage",
        "call_args": [
            {
                "name": "hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            }
        ],
        "documentation": "Clear an unrequested preimage from the runtime storage.",
        "module_prefix": "Preimage",
        "module_name": "Preimage",
        "spec_version": 9280
    },
    {
        "call_name": "request_preimage",
        "call_args": [
            {
                "name": "hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            }
        ],
        "documentation": "Request a preimage be uploaded to the chain without paying any fees or deposits.\n\nIf the preimage requests has already been provided on-chain, we unreserve any deposit\na user may have paid, and take the control of the preimage out of their hands.",
        "module_prefix": "Preimage",
        "module_name": "Preimage",
        "spec_version": 9280
    },
    {
        "call_name": "unrequest_preimage",
        "call_args": [
            {
                "name": "hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            }
        ],
        "documentation": "Clear a previously made request for a preimage.\n\nNOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`.",
        "module_prefix": "Preimage",
        "module_name": "Preimage",
        "spec_version": 9280
    },
    {
        "call_name": "report_equivocation",
        "call_args": [
            {
                "name": "equivocation_proof",
                "type": 185,
                "typeName": "Box<EquivocationProof<T::Header>>",
                "docs": []
            },
            {
                "name": "key_owner_proof",
                "type": 190,
                "typeName": "T::KeyOwnerProof",
                "docs": []
            }
        ],
        "documentation": "Report authority equivocation/misbehavior. This method will verify\nthe equivocation proof and validate the given key ownership proof\nagainst the extracted offender. If both are valid, the offence will\nbe reported.",
        "module_prefix": "Babe",
        "module_name": "Babe",
        "spec_version": 9280
    },
    {
        "call_name": "report_equivocation_unsigned",
        "call_args": [
            {
                "name": "equivocation_proof",
                "type": 185,
                "typeName": "Box<EquivocationProof<T::Header>>",
                "docs": []
            },
            {
                "name": "key_owner_proof",
                "type": 190,
                "typeName": "T::KeyOwnerProof",
                "docs": []
            }
        ],
        "documentation": "Report authority equivocation/misbehavior. This method will verify\nthe equivocation proof and validate the given key ownership proof\nagainst the extracted offender. If both are valid, the offence will\nbe reported.\nThis extrinsic must be called unsigned and it is expected that only\nblock authors will call it (validated in `ValidateUnsigned`), as such\nif the block author is defined it will be defined as the equivocation\nreporter.",
        "module_prefix": "Babe",
        "module_name": "Babe",
        "spec_version": 9280
    },
    {
        "call_name": "plan_config_change",
        "call_args": [
            {
                "name": "config",
                "type": 191,
                "typeName": "NextConfigDescriptor",
                "docs": []
            }
        ],
        "documentation": "Plan an epoch config change. The epoch config change is recorded and will be enacted on\nthe next call to `enact_epoch_change`. The config will be activated one epoch after.\nMultiple calls to this method will replace any existing planned config change that had\nnot been enacted yet.",
        "module_prefix": "Babe",
        "module_name": "Babe",
        "spec_version": 9280
    },
    {
        "call_name": "set",
        "call_args": [
            {
                "name": "now",
                "type": 126,
                "typeName": "T::Moment",
                "docs": []
            }
        ],
        "documentation": "Set the current time.\n\nThis call should be invoked exactly once per block. It will panic at the finalization\nphase, if this call hasn't been invoked by that time.\n\nThe timestamp should be greater than the previous one by the amount specified by\n`MinimumPeriod`.\n\nThe dispatch origin for this call must be `Inherent`.\n\n# <weight>\n- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)\n- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in\n  `on_finalize`)\n- 1 event handler `on_timestamp_set`. Must be `O(1)`.\n# </weight>",
        "module_prefix": "Timestamp",
        "module_name": "Timestamp",
        "spec_version": 9280
    },
    {
        "call_name": "claim",
        "call_args": [
            {
                "name": "index",
                "type": 4,
                "typeName": "T::AccountIndex",
                "docs": []
            }
        ],
        "documentation": "Assign an previously unassigned index.\n\nPayment: `Deposit` is reserved from the sender account.\n\nThe dispatch origin for this call must be _Signed_.\n\n- `index`: the index to be claimed. This must not be in use.\n\nEmits `IndexAssigned` if successful.\n\n# <weight>\n- `O(1)`.\n- One storage mutation (codec `O(1)`).\n- One reserve operation.\n- One event.\n-------------------\n- DB Weight: 1 Read/Write (Accounts)\n# </weight>",
        "module_prefix": "Indices",
        "module_name": "Indices",
        "spec_version": 9280
    },
    {
        "call_name": "transfer",
        "call_args": [
            {
                "name": "new",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "index",
                "type": 4,
                "typeName": "T::AccountIndex",
                "docs": []
            }
        ],
        "documentation": "Assign an index already owned by the sender to another account. The balance reservation\nis effectively transferred to the new account.\n\nThe dispatch origin for this call must be _Signed_.\n\n- `index`: the index to be re-assigned. This must be owned by the sender.\n- `new`: the new owner of the index. This function is a no-op if it is equal to sender.\n\nEmits `IndexAssigned` if successful.\n\n# <weight>\n- `O(1)`.\n- One storage mutation (codec `O(1)`).\n- One transfer operation.\n- One event.\n-------------------\n- DB Weight:\n   - Reads: Indices Accounts, System Account (recipient)\n   - Writes: Indices Accounts, System Account (recipient)\n# </weight>",
        "module_prefix": "Indices",
        "module_name": "Indices",
        "spec_version": 9280
    },
    {
        "call_name": "free",
        "call_args": [
            {
                "name": "index",
                "type": 4,
                "typeName": "T::AccountIndex",
                "docs": []
            }
        ],
        "documentation": "Free up an index owned by the sender.\n\nPayment: Any previous deposit placed for the index is unreserved in the sender account.\n\nThe dispatch origin for this call must be _Signed_ and the sender must own the index.\n\n- `index`: the index to be freed. This must be owned by the sender.\n\nEmits `IndexFreed` if successful.\n\n# <weight>\n- `O(1)`.\n- One storage mutation (codec `O(1)`).\n- One reserve operation.\n- One event.\n-------------------\n- DB Weight: 1 Read/Write (Accounts)\n# </weight>",
        "module_prefix": "Indices",
        "module_name": "Indices",
        "spec_version": 9280
    },
    {
        "call_name": "force_transfer",
        "call_args": [
            {
                "name": "new",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "index",
                "type": 4,
                "typeName": "T::AccountIndex",
                "docs": []
            },
            {
                "name": "freeze",
                "type": 42,
                "typeName": "bool",
                "docs": []
            }
        ],
        "documentation": "Force an index to an account. This doesn't require a deposit. If the index is already\nheld, then any deposit is reimbursed to its current owner.\n\nThe dispatch origin for this call must be _Root_.\n\n- `index`: the index to be (re-)assigned.\n- `new`: the new owner of the index. This function is a no-op if it is equal to sender.\n- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.\n\nEmits `IndexAssigned` if successful.\n\n# <weight>\n- `O(1)`.\n- One storage mutation (codec `O(1)`).\n- Up to one reserve operation.\n- One event.\n-------------------\n- DB Weight:\n   - Reads: Indices Accounts, System Account (original owner)\n   - Writes: Indices Accounts, System Account (original owner)\n# </weight>",
        "module_prefix": "Indices",
        "module_name": "Indices",
        "spec_version": 9280
    },
    {
        "call_name": "freeze",
        "call_args": [
            {
                "name": "index",
                "type": 4,
                "typeName": "T::AccountIndex",
                "docs": []
            }
        ],
        "documentation": "Freeze an index so it will always point to the sender account. This consumes the\ndeposit.\n\nThe dispatch origin for this call must be _Signed_ and the signing account must have a\nnon-frozen account `index`.\n\n- `index`: the index to be frozen in place.\n\nEmits `IndexFrozen` if successful.\n\n# <weight>\n- `O(1)`.\n- One storage mutation (codec `O(1)`).\n- Up to one slash operation.\n- One event.\n-------------------\n- DB Weight: 1 Read/Write (Accounts)\n# </weight>",
        "module_prefix": "Indices",
        "module_name": "Indices",
        "spec_version": 9280
    },
    {
        "call_name": "transfer",
        "call_args": [
            {
                "name": "dest",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "value",
                "type": 57,
                "typeName": "T::Balance",
                "docs": []
            }
        ],
        "documentation": "Transfer some liquid free balance to another account.\n\n`transfer` will set the `FreeBalance` of the sender and receiver.\nIf the sender's account is below the existential deposit as a result\nof the transfer, the account will be reaped.\n\nThe dispatch origin for this call must be `Signed` by the transactor.\n\n# <weight>\n- Dependent on arguments but not critical, given proper implementations for input config\n  types. See related functions below.\n- It contains a limited number of reads and writes internally and no complex\n  computation.\n\nRelated functions:\n\n  - `ensure_can_withdraw` is always called internally but has a bounded complexity.\n  - Transferring balances to accounts that did not exist before will cause\n    `T::OnNewAccount::on_new_account` to be called.\n  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.\n  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check\n    that the transfer will not kill the origin account.\n---------------------------------\n- Origin account is already in memory, so no DB operations for them.\n# </weight>",
        "module_prefix": "Balances",
        "module_name": "Balances",
        "spec_version": 9280
    },
    {
        "call_name": "set_balance",
        "call_args": [
            {
                "name": "who",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "new_free",
                "type": 57,
                "typeName": "T::Balance",
                "docs": []
            },
            {
                "name": "new_reserved",
                "type": 57,
                "typeName": "T::Balance",
                "docs": []
            }
        ],
        "documentation": "Set the balances of a given account.\n\nThis will alter `FreeBalance` and `ReservedBalance` in storage. it will\nalso alter the total issuance of the system (`TotalIssuance`) appropriately.\nIf the new free or reserved balance is below the existential deposit,\nit will reset the account nonce (`frame_system::AccountNonce`).\n\nThe dispatch origin for this call is `root`.",
        "module_prefix": "Balances",
        "module_name": "Balances",
        "spec_version": 9280
    },
    {
        "call_name": "force_transfer",
        "call_args": [
            {
                "name": "source",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "dest",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "value",
                "type": 57,
                "typeName": "T::Balance",
                "docs": []
            }
        ],
        "documentation": "Exactly as `transfer`, except the origin must be root and the source account may be\nspecified.\n# <weight>\n- Same as transfer, but additional read and write because the source account is not\n  assumed to be in the overlay.\n# </weight>",
        "module_prefix": "Balances",
        "module_name": "Balances",
        "spec_version": 9280
    },
    {
        "call_name": "transfer_keep_alive",
        "call_args": [
            {
                "name": "dest",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "value",
                "type": 57,
                "typeName": "T::Balance",
                "docs": []
            }
        ],
        "documentation": "Same as the [`transfer`] call, but with a check that the transfer will not kill the\norigin account.\n\n99% of the time you want [`transfer`] instead.\n\n[`transfer`]: struct.Pallet.html#method.transfer",
        "module_prefix": "Balances",
        "module_name": "Balances",
        "spec_version": 9280
    },
    {
        "call_name": "transfer_all",
        "call_args": [
            {
                "name": "dest",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "keep_alive",
                "type": 42,
                "typeName": "bool",
                "docs": []
            }
        ],
        "documentation": "Transfer the entire transferable balance from the caller account.\n\nNOTE: This function only attempts to transfer _transferable_ balances. This means that\nany locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be\ntransferred by this function. To ensure that this function results in a killed account,\nyou might need to prepare the account by removing any reference counters, storage\ndeposits, etc...\n\nThe dispatch origin of this call must be Signed.\n\n- `dest`: The recipient of the transfer.\n- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all\n  of the funds the account has, causing the sender account to be killed (false), or\n  transfer everything except at least the existential deposit, which will guarantee to\n  keep the sender account alive (true). # <weight>\n- O(1). Just like transfer, but reading the user's transferable balance first.\n  #</weight>",
        "module_prefix": "Balances",
        "module_name": "Balances",
        "spec_version": 9280
    },
    {
        "call_name": "force_unreserve",
        "call_args": [
            {
                "name": "who",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "amount",
                "type": 6,
                "typeName": "T::Balance",
                "docs": []
            }
        ],
        "documentation": "Unreserve some balance from a user by force.\n\nCan only be called by ROOT.",
        "module_prefix": "Balances",
        "module_name": "Balances",
        "spec_version": 9280
    },
    {
        "call_name": "set_uncles",
        "call_args": [
            {
                "name": "new_uncles",
                "type": 200,
                "typeName": "Vec<T::Header>",
                "docs": []
            }
        ],
        "documentation": "Provide a set of uncles.",
        "module_prefix": "Authorship",
        "module_name": "Authorship",
        "spec_version": 9280
    },
    {
        "call_name": "bond",
        "call_args": [
            {
                "name": "controller",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "value",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            },
            {
                "name": "payee",
                "type": 202,
                "typeName": "RewardDestination<T::AccountId>",
                "docs": []
            }
        ],
        "documentation": "Take the origin account as a stash and lock up `value` of its balance. `controller` will\nbe the account that controls it.\n\n`value` must be more than the `minimum_balance` specified by `T::Currency`.\n\nThe dispatch origin for this call must be _Signed_ by the stash account.\n\nEmits `Bonded`.\n# <weight>\n- Independent of the arguments. Moderate complexity.\n- O(1).\n- Three extra DB entries.\n\nNOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned\nunless the `origin` falls below _existential deposit_ and gets removed as dust.\n------------------\n# </weight>",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "bond_extra",
        "call_args": [
            {
                "name": "max_additional",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            }
        ],
        "documentation": "Add some extra amount that have appeared in the stash `free_balance` into the balance up\nfor staking.\n\nThe dispatch origin for this call must be _Signed_ by the stash, not the controller.\n\nUse this if there are additional funds in your stash account that you wish to bond.\nUnlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose\nany limitation on the amount that can be added.\n\nEmits `Bonded`.\n\n# <weight>\n- Independent of the arguments. Insignificant complexity.\n- O(1).\n# </weight>",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "unbond",
        "call_args": [
            {
                "name": "value",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            }
        ],
        "documentation": "Schedule a portion of the stash to be unlocked ready for transfer out after the bond\nperiod ends. If this leaves an amount actively bonded less than\nT::Currency::minimum_balance(), then it is increased to the full amount.\n\nThe dispatch origin for this call must be _Signed_ by the controller, not the stash.\n\nOnce the unlock period is done, you can call `withdraw_unbonded` to actually move\nthe funds out of management ready for transfer.\n\nNo more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)\ncan co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need\nto be called first to remove some of the chunks (if possible).\n\nIf a user encounters the `InsufficientBond` error when calling this extrinsic,\nthey should call `chill` first in order to free up their bonded funds.\n\nEmits `Unbonded`.\n\nSee also [`Call::withdraw_unbonded`].",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "withdraw_unbonded",
        "call_args": [
            {
                "name": "num_slashing_spans",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Remove any unlocked chunks from the `unlocking` queue from our management.\n\nThis essentially frees up that balance to be used by the stash account to do\nwhatever it wants.\n\nThe dispatch origin for this call must be _Signed_ by the controller.\n\nEmits `Withdrawn`.\n\nSee also [`Call::unbond`].\n\n# <weight>\nComplexity O(S) where S is the number of slashing spans to remove\nNOTE: Weight annotation is the kill scenario, we refund otherwise.\n# </weight>",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "validate",
        "call_args": [
            {
                "name": "prefs",
                "type": 39,
                "typeName": "ValidatorPrefs",
                "docs": []
            }
        ],
        "documentation": "Declare the desire to validate for the origin controller.\n\nEffects will be felt at the beginning of the next era.\n\nThe dispatch origin for this call must be _Signed_ by the controller, not the stash.",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "nominate",
        "call_args": [
            {
                "name": "targets",
                "type": 203,
                "typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                "docs": []
            }
        ],
        "documentation": "Declare the desire to nominate `targets` for the origin controller.\n\nEffects will be felt at the beginning of the next era.\n\nThe dispatch origin for this call must be _Signed_ by the controller, not the stash.\n\n# <weight>\n- The transaction's complexity is proportional to the size of `targets` (N)\nwhich is capped at CompactAssignments::LIMIT (T::MaxNominations).\n- Both the reads and writes follow a similar pattern.\n# </weight>",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "chill",
        "call_args": [],
        "documentation": "Declare no desire to either validate or nominate.\n\nEffects will be felt at the beginning of the next era.\n\nThe dispatch origin for this call must be _Signed_ by the controller, not the stash.\n\n# <weight>\n- Independent of the arguments. Insignificant complexity.\n- Contains one read.\n- Writes are limited to the `origin` account key.\n# </weight>",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "set_payee",
        "call_args": [
            {
                "name": "payee",
                "type": 202,
                "typeName": "RewardDestination<T::AccountId>",
                "docs": []
            }
        ],
        "documentation": "(Re-)set the payment target for a controller.\n\nEffects will be felt instantly (as soon as this function is completed successfully).\n\nThe dispatch origin for this call must be _Signed_ by the controller, not the stash.\n\n# <weight>\n- Independent of the arguments. Insignificant complexity.\n- Contains a limited number of reads.\n- Writes are limited to the `origin` account key.\n---------\n- Weight: O(1)\n- DB Weight:\n    - Read: Ledger\n    - Write: Payee\n# </weight>",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "set_controller",
        "call_args": [
            {
                "name": "controller",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            }
        ],
        "documentation": "(Re-)set the controller of a stash.\n\nEffects will be felt instantly (as soon as this function is completed successfully).\n\nThe dispatch origin for this call must be _Signed_ by the stash, not the controller.\n\n# <weight>\n- Independent of the arguments. Insignificant complexity.\n- Contains a limited number of reads.\n- Writes are limited to the `origin` account key.\n----------\nWeight: O(1)\nDB Weight:\n- Read: Bonded, Ledger New Controller, Ledger Old Controller\n- Write: Bonded, Ledger New Controller, Ledger Old Controller\n# </weight>",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "set_validator_count",
        "call_args": [
            {
                "name": "new",
                "type": 123,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Sets the ideal number of validators.\n\nThe dispatch origin must be Root.\n\n# <weight>\nWeight: O(1)\nWrite: Validator Count\n# </weight>",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "increase_validator_count",
        "call_args": [
            {
                "name": "additional",
                "type": 123,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Increments the ideal number of validators.\n\nThe dispatch origin must be Root.\n\n# <weight>\nSame as [`Self::set_validator_count`].\n# </weight>",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "scale_validator_count",
        "call_args": [
            {
                "name": "factor",
                "type": 204,
                "typeName": "Percent",
                "docs": []
            }
        ],
        "documentation": "Scale up the ideal number of validators by a factor.\n\nThe dispatch origin must be Root.\n\n# <weight>\nSame as [`Self::set_validator_count`].\n# </weight>",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "force_no_eras",
        "call_args": [],
        "documentation": "Force there to be no new eras indefinitely.\n\nThe dispatch origin must be Root.\n\n# Warning\n\nThe election process starts multiple blocks before the end of the era.\nThus the election process may be ongoing when this is called. In this case the\nelection will continue until the next era is triggered.\n\n# <weight>\n- No arguments.\n- Weight: O(1)\n- Write: ForceEra\n# </weight>",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "force_new_era",
        "call_args": [],
        "documentation": "Force there to be a new era at the end of the next session. After this, it will be\nreset to normal (non-forced) behaviour.\n\nThe dispatch origin must be Root.\n\n# Warning\n\nThe election process starts multiple blocks before the end of the era.\nIf this is called just before a new era is triggered, the election process may not\nhave enough blocks to get a result.\n\n# <weight>\n- No arguments.\n- Weight: O(1)\n- Write ForceEra\n# </weight>",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "set_invulnerables",
        "call_args": [
            {
                "name": "invulnerables",
                "type": 61,
                "typeName": "Vec<T::AccountId>",
                "docs": []
            }
        ],
        "documentation": "Set the validators who cannot be slashed (if any).\n\nThe dispatch origin must be Root.",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "force_unstake",
        "call_args": [
            {
                "name": "stash",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "num_slashing_spans",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Force a current staker to become completely unstaked, immediately.\n\nThe dispatch origin must be Root.",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "force_new_era_always",
        "call_args": [],
        "documentation": "Force there to be a new era at the end of sessions indefinitely.\n\nThe dispatch origin must be Root.\n\n# Warning\n\nThe election process starts multiple blocks before the end of the era.\nIf this is called just before a new era is triggered, the election process may not\nhave enough blocks to get a result.",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "cancel_deferred_slash",
        "call_args": [
            {
                "name": "era",
                "type": 4,
                "typeName": "EraIndex",
                "docs": []
            },
            {
                "name": "slash_indices",
                "type": 205,
                "typeName": "Vec<u32>",
                "docs": []
            }
        ],
        "documentation": "Cancel enactment of a deferred slash.\n\nCan be called by the `T::SlashCancelOrigin`.\n\nParameters: era and indices of the slashes for that era to kill.",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "payout_stakers",
        "call_args": [
            {
                "name": "validator_stash",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "era",
                "type": 4,
                "typeName": "EraIndex",
                "docs": []
            }
        ],
        "documentation": "Pay out all the stakers behind a single validator for a single era.\n\n- `validator_stash` is the stash account of the validator. Their nominators, up to\n  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.\n- `era` may be any era between `[current_era - history_depth; current_era]`.\n\nThe origin of this call must be _Signed_. Any account can call this function, even if\nit is not one of the stakers.\n\n# <weight>\n- Time complexity: at most O(MaxNominatorRewardedPerValidator).\n- Contains a limited number of reads and writes.\n-----------\nN is the Number of payouts for the validator (including the validator)\nWeight:\n- Reward Destination Staked: O(N)\n- Reward Destination Controller (Creating): O(N)\n\n  NOTE: weights are assuming that payouts are made to alive stash account (Staked).\n  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.\n# </weight>",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "rebond",
        "call_args": [
            {
                "name": "value",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            }
        ],
        "documentation": "Rebond a portion of the stash scheduled to be unlocked.\n\nThe dispatch origin must be signed by the controller.\n\n# <weight>\n- Time complexity: O(L), where L is unlocking chunks\n- Bounded by `MaxUnlockingChunks`.\n- Storage changes: Can't increase storage, only decrease it.\n# </weight>",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "set_history_depth",
        "call_args": [
            {
                "name": "new_history_depth",
                "type": 123,
                "typeName": "EraIndex",
                "docs": []
            },
            {
                "name": "era_items_deleted",
                "type": 123,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Set `HistoryDepth` value. This function will delete any history information\nwhen `HistoryDepth` is reduced.\n\nParameters:\n- `new_history_depth`: The new history depth you would like to set.\n- `era_items_deleted`: The number of items that will be deleted by this dispatch. This\n  should report all the storage items that will be deleted by clearing old era history.\n  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an\n  accurate number.\n\nOrigin must be root.\n\n# <weight>\n- E: Number of history depths removed, i.e. 10 -> 7 = 3\n- Weight: O(E)\n- DB Weight:\n    - Reads: Current Era, History Depth\n    - Writes: History Depth\n    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs\n    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,\n      ErasStartSessionIndex\n# </weight>",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "reap_stash",
        "call_args": [
            {
                "name": "stash",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "num_slashing_spans",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Remove all data structures concerning a staker/stash once it is at a state where it can\nbe considered `dust` in the staking system. The requirements are:\n\n1. the `total_balance` of the stash is below existential deposit.\n2. or, the `ledger.total` of the stash is below existential deposit.\n\nThe former can happen in cases like a slash; the latter when a fully unbonded account\nis still receiving staking rewards in `RewardDestination::Staked`.\n\nIt can be called by anyone, as long as `stash` meets the above requirements.\n\nRefunds the transaction fees upon successful execution.",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "kick",
        "call_args": [
            {
                "name": "who",
                "type": 203,
                "typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                "docs": []
            }
        ],
        "documentation": "Remove the given nominations from the calling validator.\n\nEffects will be felt at the beginning of the next era.\n\nThe dispatch origin for this call must be _Signed_ by the controller, not the stash.\n\n- `who`: A list of nominator stash accounts who are nominating this validator which\n  should no longer be nominating this validator.\n\nNote: Making this call only makes sense if you first set the validator preferences to\nblock any further nominations.",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "set_staking_configs",
        "call_args": [
            {
                "name": "min_nominator_bond",
                "type": 206,
                "typeName": "ConfigOp<BalanceOf<T>>",
                "docs": []
            },
            {
                "name": "min_validator_bond",
                "type": 206,
                "typeName": "ConfigOp<BalanceOf<T>>",
                "docs": []
            },
            {
                "name": "max_nominator_count",
                "type": 207,
                "typeName": "ConfigOp<u32>",
                "docs": []
            },
            {
                "name": "max_validator_count",
                "type": 207,
                "typeName": "ConfigOp<u32>",
                "docs": []
            },
            {
                "name": "chill_threshold",
                "type": 208,
                "typeName": "ConfigOp<Percent>",
                "docs": []
            },
            {
                "name": "min_commission",
                "type": 209,
                "typeName": "ConfigOp<Perbill>",
                "docs": []
            }
        ],
        "documentation": "Update the various staking configurations .\n\n* `min_nominator_bond`: The minimum active bond needed to be a nominator.\n* `min_validator_bond`: The minimum active bond needed to be a validator.\n* `max_nominator_count`: The max number of users who can be a nominator at once. When\n  set to `None`, no limit is enforced.\n* `max_validator_count`: The max number of users who can be a validator at once. When\n  set to `None`, no limit is enforced.\n* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which\n  should be filled in order for the `chill_other` transaction to work.\n* `min_commission`: The minimum amount of commission that each validators must maintain.\n  This is checked only upon calling `validate`. Existing validators are not affected.\n\nOrigin must be Root to call this function.\n\nNOTE: Existing nominators and validators will not be affected by this update.\nto kick people under the new limits, `chill_other` should be called.",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "chill_other",
        "call_args": [
            {
                "name": "controller",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            }
        ],
        "documentation": "Declare a `controller` to stop participating as either a validator or nominator.\n\nEffects will be felt at the beginning of the next era.\n\nThe dispatch origin for this call must be _Signed_, but can be called by anyone.\n\nIf the caller is the same as the controller being targeted, then no further checks are\nenforced, and this function behaves just like `chill`.\n\nIf the caller is different than the controller being targeted, the following conditions\nmust be met:\n\n* `controller` must belong to a nominator who has become non-decodable,\n\nOr:\n\n* A `ChillThreshold` must be set and checked which defines how close to the max\n  nominators or validators we must reach before users can start chilling one-another.\n* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine\n  how close we are to the threshold.\n* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines\n  if this is a person that should be chilled because they have not met the threshold\n  bond required.\n\nThis can be helpful if bond requirements are updated, and we need to remove old users\nwho do not satisfy these requirements.",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "force_apply_min_commission",
        "call_args": [
            {
                "name": "validator_stash",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            }
        ],
        "documentation": "Force a validator to have at least the minimum commission. This will not affect a\nvalidator who already has a commission greater than or equal to the minimum. Any account\ncan call this.",
        "module_prefix": "Staking",
        "module_name": "Staking",
        "spec_version": 9280
    },
    {
        "call_name": "set_keys",
        "call_args": [
            {
                "name": "keys",
                "type": 211,
                "typeName": "T::Keys",
                "docs": []
            },
            {
                "name": "proof",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Sets the session key(s) of the function caller to `keys`.\nAllows an account to set its session key prior to becoming a validator.\nThis doesn't take effect until the next session.\n\nThe dispatch origin of this function must be signed.\n\n# <weight>\n- Complexity: `O(1)`. Actual cost depends on the number of length of\n  `T::Keys::key_ids()` which is fixed.\n- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`\n- DbWrites: `origin account`, `NextKeys`\n- DbReads per key id: `KeyOwner`\n- DbWrites per key id: `KeyOwner`\n# </weight>",
        "module_prefix": "Session",
        "module_name": "Session",
        "spec_version": 9280
    },
    {
        "call_name": "purge_keys",
        "call_args": [],
        "documentation": "Removes any session key(s) of the function caller.\n\nThis doesn't take effect until the next session.\n\nThe dispatch origin of this function must be Signed and the account must be either be\nconvertible to a validator ID using the chain's typical addressing system (this usually\nmeans being a controller account) or directly convertible into a validator ID (which\nusually means being a stash account).\n\n# <weight>\n- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length\n  of `T::Keys::key_ids()` which is fixed.\n- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`\n- DbWrites: `NextKeys`, `origin account`\n- DbWrites per key id: `KeyOwner`\n# </weight>",
        "module_prefix": "Session",
        "module_name": "Session",
        "spec_version": 9280
    },
    {
        "call_name": "report_equivocation",
        "call_args": [
            {
                "name": "equivocation_proof",
                "type": 216,
                "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                "docs": []
            },
            {
                "name": "key_owner_proof",
                "type": 190,
                "typeName": "T::KeyOwnerProof",
                "docs": []
            }
        ],
        "documentation": "Report voter equivocation/misbehavior. This method will verify the\nequivocation proof and validate the given key ownership proof\nagainst the extracted offender. If both are valid, the offence\nwill be reported.",
        "module_prefix": "Grandpa",
        "module_name": "Grandpa",
        "spec_version": 9280
    },
    {
        "call_name": "report_equivocation_unsigned",
        "call_args": [
            {
                "name": "equivocation_proof",
                "type": 216,
                "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                "docs": []
            },
            {
                "name": "key_owner_proof",
                "type": 190,
                "typeName": "T::KeyOwnerProof",
                "docs": []
            }
        ],
        "documentation": "Report voter equivocation/misbehavior. This method will verify the\nequivocation proof and validate the given key ownership proof\nagainst the extracted offender. If both are valid, the offence\nwill be reported.\n\nThis extrinsic must be called unsigned and it is expected that only\nblock authors will call it (validated in `ValidateUnsigned`), as such\nif the block author is defined it will be defined as the equivocation\nreporter.",
        "module_prefix": "Grandpa",
        "module_name": "Grandpa",
        "spec_version": 9280
    },
    {
        "call_name": "note_stalled",
        "call_args": [
            {
                "name": "delay",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            },
            {
                "name": "best_finalized_block_number",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            }
        ],
        "documentation": "Note that the current authority set of the GRANDPA finality gadget has stalled.\n\nThis will trigger a forced authority set change at the beginning of the next session, to\nbe enacted `delay` blocks after that. The `delay` should be high enough to safely assume\nthat the block signalling the forced change will not be re-orged e.g. 1000 blocks.\nThe block production rate (which may be slowed down because of finality lagging) should\nbe taken into account when choosing the `delay`. The GRANDPA voters based on the new\nauthority will start voting on top of `best_finalized_block_number` for new finalized\nblocks. `best_finalized_block_number` should be the highest of the latest finalized\nblock of all validators of the new authority set.\n\nOnly callable by root.",
        "module_prefix": "Grandpa",
        "module_name": "Grandpa",
        "spec_version": 9280
    },
    {
        "call_name": "heartbeat",
        "call_args": [
            {
                "name": "heartbeat",
                "type": 227,
                "typeName": "Heartbeat<T::BlockNumber>",
                "docs": []
            },
            {
                "name": "signature",
                "type": 232,
                "typeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "docs": []
            }
        ],
        "documentation": "# <weight>\n- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is\n  length of `heartbeat.network_state.external_address`\n  - `O(K)`: decoding of length `K`\n  - `O(E)`: decoding/encoding of length `E`\n- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,\n  `ReceivedHeartbeats`\n- DbWrites: `ReceivedHeartbeats`\n# </weight>",
        "module_prefix": "ImOnline",
        "module_name": "ImOnline",
        "spec_version": 9280
    },
    {
        "call_name": "propose",
        "call_args": [
            {
                "name": "proposal_hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            },
            {
                "name": "value",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            }
        ],
        "documentation": "Propose a sensitive action to be taken.\n\nThe dispatch origin of this call must be _Signed_ and the sender must\nhave funds to cover the deposit.\n\n- `proposal_hash`: The hash of the proposal preimage.\n- `value`: The amount of deposit (must be at least `MinimumDeposit`).\n\nEmits `Proposed`.\n\nWeight: `O(p)`",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "second",
        "call_args": [
            {
                "name": "proposal",
                "type": 123,
                "typeName": "PropIndex",
                "docs": []
            },
            {
                "name": "seconds_upper_bound",
                "type": 123,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Signals agreement with a particular proposal.\n\nThe dispatch origin of this call must be _Signed_ and the sender\nmust have funds to cover the deposit, equal to the original deposit.\n\n- `proposal`: The index of the proposal to second.\n- `seconds_upper_bound`: an upper bound on the current number of seconds on this\n  proposal. Extrinsic is weighted according to this value with no refund.\n\nWeight: `O(S)` where S is the number of seconds a proposal already has.",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "vote",
        "call_args": [
            {
                "name": "ref_index",
                "type": 123,
                "typeName": "ReferendumIndex",
                "docs": []
            },
            {
                "name": "vote",
                "type": 63,
                "typeName": "AccountVote<BalanceOf<T>>",
                "docs": []
            }
        ],
        "documentation": "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;\notherwise it is a vote to keep the status quo.\n\nThe dispatch origin of this call must be _Signed_.\n\n- `ref_index`: The index of the referendum to vote for.\n- `vote`: The vote configuration.\n\nWeight: `O(R)` where R is the number of referendums the voter has voted on.",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "emergency_cancel",
        "call_args": [
            {
                "name": "ref_index",
                "type": 4,
                "typeName": "ReferendumIndex",
                "docs": []
            }
        ],
        "documentation": "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same\nreferendum.\n\nThe dispatch origin of this call must be `CancellationOrigin`.\n\n-`ref_index`: The index of the referendum to cancel.\n\nWeight: `O(1)`.",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "external_propose",
        "call_args": [
            {
                "name": "proposal_hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            }
        ],
        "documentation": "Schedule a referendum to be tabled once it is legal to schedule an external\nreferendum.\n\nThe dispatch origin of this call must be `ExternalOrigin`.\n\n- `proposal_hash`: The preimage hash of the proposal.\n\nWeight: `O(V)` with V number of vetoers in the blacklist of proposal.\n  Decoding vec of length V. Charged as maximum",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "external_propose_majority",
        "call_args": [
            {
                "name": "proposal_hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            }
        ],
        "documentation": "Schedule a majority-carries referendum to be tabled next once it is legal to schedule\nan external referendum.\n\nThe dispatch of this call must be `ExternalMajorityOrigin`.\n\n- `proposal_hash`: The preimage hash of the proposal.\n\nUnlike `external_propose`, blacklisting has no effect on this and it may replace a\npre-scheduled `external_propose` call.\n\nWeight: `O(1)`",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "external_propose_default",
        "call_args": [
            {
                "name": "proposal_hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            }
        ],
        "documentation": "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to\nschedule an external referendum.\n\nThe dispatch of this call must be `ExternalDefaultOrigin`.\n\n- `proposal_hash`: The preimage hash of the proposal.\n\nUnlike `external_propose`, blacklisting has no effect on this and it may replace a\npre-scheduled `external_propose` call.\n\nWeight: `O(1)`",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "fast_track",
        "call_args": [
            {
                "name": "proposal_hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            },
            {
                "name": "voting_period",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            },
            {
                "name": "delay",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            }
        ],
        "documentation": "Schedule the currently externally-proposed majority-carries referendum to be tabled\nimmediately. If there is no externally-proposed referendum currently, or if there is one\nbut it is not a majority-carries referendum then it fails.\n\nThe dispatch of this call must be `FastTrackOrigin`.\n\n- `proposal_hash`: The hash of the current external proposal.\n- `voting_period`: The period that is allowed for voting on this proposal.\n\tMust be always greater than zero.\n\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.\n- `delay`: The number of block after voting has ended in approval and this should be\n  enacted. This doesn't have a minimum amount.\n\nEmits `Started`.\n\nWeight: `O(1)`",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "veto_external",
        "call_args": [
            {
                "name": "proposal_hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            }
        ],
        "documentation": "Veto and blacklist the external proposal hash.\n\nThe dispatch origin of this call must be `VetoOrigin`.\n\n- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.\n\nEmits `Vetoed`.\n\nWeight: `O(V + log(V))` where V is number of `existing vetoers`",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "cancel_referendum",
        "call_args": [
            {
                "name": "ref_index",
                "type": 123,
                "typeName": "ReferendumIndex",
                "docs": []
            }
        ],
        "documentation": "Remove a referendum.\n\nThe dispatch origin of this call must be _Root_.\n\n- `ref_index`: The index of the referendum to cancel.\n\n# Weight: `O(1)`.",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "cancel_queued",
        "call_args": [
            {
                "name": "which",
                "type": 4,
                "typeName": "ReferendumIndex",
                "docs": []
            }
        ],
        "documentation": "Cancel a proposal queued for enactment.\n\nThe dispatch origin of this call must be _Root_.\n\n- `which`: The index of the referendum to cancel.\n\nWeight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`.",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "delegate",
        "call_args": [
            {
                "name": "to",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "conviction",
                "type": 234,
                "typeName": "Conviction",
                "docs": []
            },
            {
                "name": "balance",
                "type": 6,
                "typeName": "BalanceOf<T>",
                "docs": []
            }
        ],
        "documentation": "Delegate the voting power (with some given conviction) of the sending account.\n\nThe balance delegated is locked for as long as it's delegated, and thereafter for the\ntime appropriate for the conviction's lock period.\n\nThe dispatch origin of this call must be _Signed_, and the signing account must either:\n  - be delegating already; or\n  - have no voting activity (if there is, then it will need to be removed/consolidated\n    through `reap_vote` or `unvote`).\n\n- `to`: The account whose voting the `target` account's voting power will follow.\n- `conviction`: The conviction that will be attached to the delegated votes. When the\n  account is undelegated, the funds will be locked for the corresponding period.\n- `balance`: The amount of the account's balance to be used in delegating. This must not\n  be more than the account's current balance.\n\nEmits `Delegated`.\n\nWeight: `O(R)` where R is the number of referendums the voter delegating to has\n  voted on. Weight is charged as if maximum votes.",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "undelegate",
        "call_args": [],
        "documentation": "Undelegate the voting power of the sending account.\n\nTokens may be unlocked following once an amount of time consistent with the lock period\nof the conviction with which the delegation was issued.\n\nThe dispatch origin of this call must be _Signed_ and the signing account must be\ncurrently delegating.\n\nEmits `Undelegated`.\n\nWeight: `O(R)` where R is the number of referendums the voter delegating to has\n  voted on. Weight is charged as if maximum votes.",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "clear_public_proposals",
        "call_args": [],
        "documentation": "Clears all public proposals.\n\nThe dispatch origin of this call must be _Root_.\n\nWeight: `O(1)`.",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "note_preimage",
        "call_args": [
            {
                "name": "encoded_proposal",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Register the preimage for an upcoming proposal. This doesn't require the proposal to be\nin the dispatch queue but does require a deposit, returned once enacted.\n\nThe dispatch origin of this call must be _Signed_.\n\n- `encoded_proposal`: The preimage of a proposal.\n\nEmits `PreimageNoted`.\n\nWeight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit).",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "note_preimage_operational",
        "call_args": [
            {
                "name": "encoded_proposal",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Same as `note_preimage` but origin is `OperationalPreimageOrigin`.",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "note_imminent_preimage",
        "call_args": [
            {
                "name": "encoded_proposal",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Register the preimage for an upcoming proposal. This requires the proposal to be\nin the dispatch queue. No deposit is needed. When this call is successful, i.e.\nthe preimage has not been uploaded before and matches some imminent proposal,\nno fee is paid.\n\nThe dispatch origin of this call must be _Signed_.\n\n- `encoded_proposal`: The preimage of a proposal.\n\nEmits `PreimageNoted`.\n\nWeight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit).",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "note_imminent_preimage_operational",
        "call_args": [
            {
                "name": "encoded_proposal",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`.",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "reap_preimage",
        "call_args": [
            {
                "name": "proposal_hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            },
            {
                "name": "proposal_len_upper_bound",
                "type": 123,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Remove an expired proposal preimage and collect the deposit.\n\nThe dispatch origin of this call must be _Signed_.\n\n- `proposal_hash`: The preimage hash of a proposal.\n- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is\n  weighted according to this value with no refund.\n\nThis will only work after `VotingPeriod` blocks from the time that the preimage was\nnoted, if it's the same account doing it. If it's a different account, then it'll only\nwork an additional `EnactmentPeriod` later.\n\nEmits `PreimageReaped`.\n\nWeight: `O(D)` where D is length of proposal.",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "unlock",
        "call_args": [
            {
                "name": "target",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            }
        ],
        "documentation": "Unlock tokens that have an expired lock.\n\nThe dispatch origin of this call must be _Signed_.\n\n- `target`: The account to remove the lock on.\n\nWeight: `O(R)` with R number of vote of target.",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "remove_vote",
        "call_args": [
            {
                "name": "index",
                "type": 4,
                "typeName": "ReferendumIndex",
                "docs": []
            }
        ],
        "documentation": "Remove a vote for a referendum.\n\nIf:\n- the referendum was cancelled, or\n- the referendum is ongoing, or\n- the referendum has ended such that\n  - the vote of the account was in opposition to the result; or\n  - there was no conviction to the account's vote; or\n  - the account made a split vote\n...then the vote is removed cleanly and a following call to `unlock` may result in more\nfunds being available.\n\nIf, however, the referendum has ended and:\n- it finished corresponding to the vote of the account, and\n- the account made a standard vote with conviction, and\n- the lock period of the conviction is not over\n...then the lock will be aggregated into the overall account's lock, which may involve\n*overlocking* (where the two locks are combined into a single lock that is the maximum\nof both the amount locked and the time is it locked for).\n\nThe dispatch origin of this call must be _Signed_, and the signer must have a vote\nregistered for referendum `index`.\n\n- `index`: The index of referendum of the vote to be removed.\n\nWeight: `O(R + log R)` where R is the number of referenda that `target` has voted on.\n  Weight is calculated for the maximum number of vote.",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "remove_other_vote",
        "call_args": [
            {
                "name": "target",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "index",
                "type": 4,
                "typeName": "ReferendumIndex",
                "docs": []
            }
        ],
        "documentation": "Remove a vote for a referendum.\n\nIf the `target` is equal to the signer, then this function is exactly equivalent to\n`remove_vote`. If not equal to the signer, then the vote must have expired,\neither because the referendum was cancelled, because the voter lost the referendum or\nbecause the conviction period is over.\n\nThe dispatch origin of this call must be _Signed_.\n\n- `target`: The account of the vote to be removed; this account must have voted for\n  referendum `index`.\n- `index`: The index of referendum of the vote to be removed.\n\nWeight: `O(R + log R)` where R is the number of referenda that `target` has voted on.\n  Weight is calculated for the maximum number of vote.",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "enact_proposal",
        "call_args": [
            {
                "name": "proposal_hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            },
            {
                "name": "index",
                "type": 4,
                "typeName": "ReferendumIndex",
                "docs": []
            }
        ],
        "documentation": "Enact a proposal from a referendum. For now we just make the weight be the maximum.",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "blacklist",
        "call_args": [
            {
                "name": "proposal_hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            },
            {
                "name": "maybe_ref_index",
                "type": 235,
                "typeName": "Option<ReferendumIndex>",
                "docs": []
            }
        ],
        "documentation": "Permanently place a proposal into the blacklist. This prevents it from ever being\nproposed again.\n\nIf called on a queued public or external proposal, then this will result in it being\nremoved. If the `ref_index` supplied is an active referendum with the proposal hash,\nthen it will be cancelled.\n\nThe dispatch origin of this call must be `BlacklistOrigin`.\n\n- `proposal_hash`: The proposal hash to blacklist permanently.\n- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be\ncancelled.\n\nWeight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a\n  reasonable value).",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "cancel_proposal",
        "call_args": [
            {
                "name": "prop_index",
                "type": 123,
                "typeName": "PropIndex",
                "docs": []
            }
        ],
        "documentation": "Remove a proposal.\n\nThe dispatch origin of this call must be `CancelProposalOrigin`.\n\n- `prop_index`: The index of the proposal to cancel.\n\nWeight: `O(p)` where `p = PublicProps::<T>::decode_len()`",
        "module_prefix": "Democracy",
        "module_name": "Democracy",
        "spec_version": 9280
    },
    {
        "call_name": "set_members",
        "call_args": [
            {
                "name": "new_members",
                "type": 61,
                "typeName": "Vec<T::AccountId>",
                "docs": []
            },
            {
                "name": "prime",
                "type": 92,
                "typeName": "Option<T::AccountId>",
                "docs": []
            },
            {
                "name": "old_count",
                "type": 4,
                "typeName": "MemberCount",
                "docs": []
            }
        ],
        "documentation": "Set the collective's membership.\n\n- `new_members`: The new member list. Be nice to the chain and provide it sorted.\n- `prime`: The prime member whose vote sets the default.\n- `old_count`: The upper bound for the previous number of members in storage. Used for\n  weight estimation.\n\nRequires root origin.\n\nNOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but\n      the weight estimations rely on it to estimate dispatchable weight.\n\n# WARNING:\n\nThe `pallet-collective` can also be managed by logic outside of the pallet through the\nimplementation of the trait [`ChangeMembers`].\nAny call to `set_members` must be careful that the member set doesn't get out of sync\nwith other logic managing the member set.\n\n# <weight>\n## Weight\n- `O(MP + N)` where:\n  - `M` old-members-count (code- and governance-bounded)\n  - `N` new-members-count (code- and governance-bounded)\n  - `P` proposals-count (code-bounded)\n- DB:\n  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the\n    members\n  - 1 storage read (codec `O(P)`) for reading the proposals\n  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal\n  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one\n# </weight>",
        "module_prefix": "Council",
        "module_name": "Council",
        "spec_version": 9280
    },
    {
        "call_name": "execute",
        "call_args": [
            {
                "name": "proposal",
                "type": 180,
                "typeName": "Box<<T as Config<I>>::Proposal>",
                "docs": []
            },
            {
                "name": "length_bound",
                "type": 123,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Dispatch a proposal from a member using the `Member` origin.\n\nOrigin must be a member of the collective.\n\n# <weight>\n## Weight\n- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching\n  `proposal`\n- DB: 1 read (codec `O(M)`) + DB access of `proposal`\n- 1 event\n# </weight>",
        "module_prefix": "Council",
        "module_name": "Council",
        "spec_version": 9280
    },
    {
        "call_name": "propose",
        "call_args": [
            {
                "name": "threshold",
                "type": 123,
                "typeName": "MemberCount",
                "docs": []
            },
            {
                "name": "proposal",
                "type": 180,
                "typeName": "Box<<T as Config<I>>::Proposal>",
                "docs": []
            },
            {
                "name": "length_bound",
                "type": 123,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Add a new proposal to either be voted on or executed directly.\n\nRequires the sender to be member.\n\n`threshold` determines whether `proposal` is executed directly (`threshold < 2`)\nor put up for voting.\n\n# <weight>\n## Weight\n- `O(B + M + P1)` or `O(B + M + P2)` where:\n  - `B` is `proposal` size in bytes (length-fee-bounded)\n  - `M` is members-count (code- and governance-bounded)\n  - branching is influenced by `threshold` where:\n    - `P1` is proposal execution complexity (`threshold < 2`)\n    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)\n- DB:\n  - 1 storage read `is_member` (codec `O(M)`)\n  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)\n  - DB accesses influenced by `threshold`:\n    - EITHER storage accesses done by `proposal` (`threshold < 2`)\n    - OR proposal insertion (`threshold <= 2`)\n      - 1 storage mutation `Proposals` (codec `O(P2)`)\n      - 1 storage mutation `ProposalCount` (codec `O(1)`)\n      - 1 storage write `ProposalOf` (codec `O(B)`)\n      - 1 storage write `Voting` (codec `O(M)`)\n  - 1 event\n# </weight>",
        "module_prefix": "Council",
        "module_name": "Council",
        "spec_version": 9280
    },
    {
        "call_name": "vote",
        "call_args": [
            {
                "name": "proposal",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            },
            {
                "name": "index",
                "type": 123,
                "typeName": "ProposalIndex",
                "docs": []
            },
            {
                "name": "approve",
                "type": 42,
                "typeName": "bool",
                "docs": []
            }
        ],
        "documentation": "Add an aye or nay vote for the sender to the given proposal.\n\nRequires the sender to be a member.\n\nTransaction fees will be waived if the member is voting on any particular proposal\nfor the first time and the call is successful. Subsequent vote changes will charge a\nfee.\n# <weight>\n## Weight\n- `O(M)` where `M` is members-count (code- and governance-bounded)\n- DB:\n  - 1 storage read `Members` (codec `O(M)`)\n  - 1 storage mutation `Voting` (codec `O(M)`)\n- 1 event\n# </weight>",
        "module_prefix": "Council",
        "module_name": "Council",
        "spec_version": 9280
    },
    {
        "call_name": "close",
        "call_args": [
            {
                "name": "proposal_hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            },
            {
                "name": "index",
                "type": 123,
                "typeName": "ProposalIndex",
                "docs": []
            },
            {
                "name": "proposal_weight_bound",
                "type": 126,
                "typeName": "Weight",
                "docs": []
            },
            {
                "name": "length_bound",
                "type": 123,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Close a vote that is either approved, disapproved or whose voting period has ended.\n\nMay be called by any signed account in order to finish voting and close the proposal.\n\nIf called before the end of the voting period it will only close the vote if it is\nhas enough votes to be approved or disapproved.\n\nIf called after the end of the voting period abstentions are counted as rejections\nunless there is a prime member set and the prime member cast an approval.\n\nIf the close operation completes successfully with disapproval, the transaction fee will\nbe waived. Otherwise execution of the approved operation will be charged to the caller.\n\n+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed\nproposal.\n+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via\n`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.\n\n# <weight>\n## Weight\n- `O(B + M + P1 + P2)` where:\n  - `B` is `proposal` size in bytes (length-fee-bounded)\n  - `M` is members-count (code- and governance-bounded)\n  - `P1` is the complexity of `proposal` preimage.\n  - `P2` is proposal-count (code-bounded)\n- DB:\n - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)\n - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec\n   `O(P2)`)\n - any mutations done while executing `proposal` (`P1`)\n- up to 3 events\n# </weight>",
        "module_prefix": "Council",
        "module_name": "Council",
        "spec_version": 9280
    },
    {
        "call_name": "disapprove_proposal",
        "call_args": [
            {
                "name": "proposal_hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            }
        ],
        "documentation": "Disapprove a proposal, close, and remove it from the system, regardless of its current\nstate.\n\nMust be called by the Root origin.\n\nParameters:\n* `proposal_hash`: The hash of the proposal that should be disapproved.\n\n# <weight>\nComplexity: O(P) where P is the number of max proposals\nDB Weight:\n* Reads: Proposals\n* Writes: Voting, Proposals, ProposalOf\n# </weight>",
        "module_prefix": "Council",
        "module_name": "Council",
        "spec_version": 9280
    },
    {
        "call_name": "set_members",
        "call_args": [
            {
                "name": "new_members",
                "type": 61,
                "typeName": "Vec<T::AccountId>",
                "docs": []
            },
            {
                "name": "prime",
                "type": 92,
                "typeName": "Option<T::AccountId>",
                "docs": []
            },
            {
                "name": "old_count",
                "type": 4,
                "typeName": "MemberCount",
                "docs": []
            }
        ],
        "documentation": "Set the collective's membership.\n\n- `new_members`: The new member list. Be nice to the chain and provide it sorted.\n- `prime`: The prime member whose vote sets the default.\n- `old_count`: The upper bound for the previous number of members in storage. Used for\n  weight estimation.\n\nRequires root origin.\n\nNOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but\n      the weight estimations rely on it to estimate dispatchable weight.\n\n# WARNING:\n\nThe `pallet-collective` can also be managed by logic outside of the pallet through the\nimplementation of the trait [`ChangeMembers`].\nAny call to `set_members` must be careful that the member set doesn't get out of sync\nwith other logic managing the member set.\n\n# <weight>\n## Weight\n- `O(MP + N)` where:\n  - `M` old-members-count (code- and governance-bounded)\n  - `N` new-members-count (code- and governance-bounded)\n  - `P` proposals-count (code-bounded)\n- DB:\n  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the\n    members\n  - 1 storage read (codec `O(P)`) for reading the proposals\n  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal\n  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one\n# </weight>",
        "module_prefix": "TechnicalCommittee",
        "module_name": "TechnicalCommittee",
        "spec_version": 9280
    },
    {
        "call_name": "execute",
        "call_args": [
            {
                "name": "proposal",
                "type": 180,
                "typeName": "Box<<T as Config<I>>::Proposal>",
                "docs": []
            },
            {
                "name": "length_bound",
                "type": 123,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Dispatch a proposal from a member using the `Member` origin.\n\nOrigin must be a member of the collective.\n\n# <weight>\n## Weight\n- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching\n  `proposal`\n- DB: 1 read (codec `O(M)`) + DB access of `proposal`\n- 1 event\n# </weight>",
        "module_prefix": "TechnicalCommittee",
        "module_name": "TechnicalCommittee",
        "spec_version": 9280
    },
    {
        "call_name": "propose",
        "call_args": [
            {
                "name": "threshold",
                "type": 123,
                "typeName": "MemberCount",
                "docs": []
            },
            {
                "name": "proposal",
                "type": 180,
                "typeName": "Box<<T as Config<I>>::Proposal>",
                "docs": []
            },
            {
                "name": "length_bound",
                "type": 123,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Add a new proposal to either be voted on or executed directly.\n\nRequires the sender to be member.\n\n`threshold` determines whether `proposal` is executed directly (`threshold < 2`)\nor put up for voting.\n\n# <weight>\n## Weight\n- `O(B + M + P1)` or `O(B + M + P2)` where:\n  - `B` is `proposal` size in bytes (length-fee-bounded)\n  - `M` is members-count (code- and governance-bounded)\n  - branching is influenced by `threshold` where:\n    - `P1` is proposal execution complexity (`threshold < 2`)\n    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)\n- DB:\n  - 1 storage read `is_member` (codec `O(M)`)\n  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)\n  - DB accesses influenced by `threshold`:\n    - EITHER storage accesses done by `proposal` (`threshold < 2`)\n    - OR proposal insertion (`threshold <= 2`)\n      - 1 storage mutation `Proposals` (codec `O(P2)`)\n      - 1 storage mutation `ProposalCount` (codec `O(1)`)\n      - 1 storage write `ProposalOf` (codec `O(B)`)\n      - 1 storage write `Voting` (codec `O(M)`)\n  - 1 event\n# </weight>",
        "module_prefix": "TechnicalCommittee",
        "module_name": "TechnicalCommittee",
        "spec_version": 9280
    },
    {
        "call_name": "vote",
        "call_args": [
            {
                "name": "proposal",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            },
            {
                "name": "index",
                "type": 123,
                "typeName": "ProposalIndex",
                "docs": []
            },
            {
                "name": "approve",
                "type": 42,
                "typeName": "bool",
                "docs": []
            }
        ],
        "documentation": "Add an aye or nay vote for the sender to the given proposal.\n\nRequires the sender to be a member.\n\nTransaction fees will be waived if the member is voting on any particular proposal\nfor the first time and the call is successful. Subsequent vote changes will charge a\nfee.\n# <weight>\n## Weight\n- `O(M)` where `M` is members-count (code- and governance-bounded)\n- DB:\n  - 1 storage read `Members` (codec `O(M)`)\n  - 1 storage mutation `Voting` (codec `O(M)`)\n- 1 event\n# </weight>",
        "module_prefix": "TechnicalCommittee",
        "module_name": "TechnicalCommittee",
        "spec_version": 9280
    },
    {
        "call_name": "close",
        "call_args": [
            {
                "name": "proposal_hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            },
            {
                "name": "index",
                "type": 123,
                "typeName": "ProposalIndex",
                "docs": []
            },
            {
                "name": "proposal_weight_bound",
                "type": 126,
                "typeName": "Weight",
                "docs": []
            },
            {
                "name": "length_bound",
                "type": 123,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Close a vote that is either approved, disapproved or whose voting period has ended.\n\nMay be called by any signed account in order to finish voting and close the proposal.\n\nIf called before the end of the voting period it will only close the vote if it is\nhas enough votes to be approved or disapproved.\n\nIf called after the end of the voting period abstentions are counted as rejections\nunless there is a prime member set and the prime member cast an approval.\n\nIf the close operation completes successfully with disapproval, the transaction fee will\nbe waived. Otherwise execution of the approved operation will be charged to the caller.\n\n+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed\nproposal.\n+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via\n`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.\n\n# <weight>\n## Weight\n- `O(B + M + P1 + P2)` where:\n  - `B` is `proposal` size in bytes (length-fee-bounded)\n  - `M` is members-count (code- and governance-bounded)\n  - `P1` is the complexity of `proposal` preimage.\n  - `P2` is proposal-count (code-bounded)\n- DB:\n - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)\n - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec\n   `O(P2)`)\n - any mutations done while executing `proposal` (`P1`)\n- up to 3 events\n# </weight>",
        "module_prefix": "TechnicalCommittee",
        "module_name": "TechnicalCommittee",
        "spec_version": 9280
    },
    {
        "call_name": "disapprove_proposal",
        "call_args": [
            {
                "name": "proposal_hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            }
        ],
        "documentation": "Disapprove a proposal, close, and remove it from the system, regardless of its current\nstate.\n\nMust be called by the Root origin.\n\nParameters:\n* `proposal_hash`: The hash of the proposal that should be disapproved.\n\n# <weight>\nComplexity: O(P) where P is the number of max proposals\nDB Weight:\n* Reads: Proposals\n* Writes: Voting, Proposals, ProposalOf\n# </weight>",
        "module_prefix": "TechnicalCommittee",
        "module_name": "TechnicalCommittee",
        "spec_version": 9280
    },
    {
        "call_name": "vote",
        "call_args": [
            {
                "name": "votes",
                "type": 61,
                "typeName": "Vec<T::AccountId>",
                "docs": []
            },
            {
                "name": "value",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            }
        ],
        "documentation": "Vote for a set of candidates for the upcoming round of election. This can be called to\nset the initial votes, or update already existing votes.\n\nUpon initial voting, `value` units of `who`'s balance is locked and a deposit amount is\nreserved. The deposit is based on the number of votes and can be updated over time.\n\nThe `votes` should:\n  - not be empty.\n  - be less than the number of possible candidates. Note that all current members and\n    runners-up are also automatically candidates for the next round.\n\nIf `value` is more than `who`'s free balance, then the maximum of the two is used.\n\nThe dispatch origin of this call must be signed.\n\n### Warning\n\nIt is the responsibility of the caller to **NOT** place all of their balance into the\nlock and keep some for further operations.\n\n# <weight>\nWe assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less.\n# </weight>",
        "module_prefix": "PhragmenElection",
        "module_name": "PhragmenElection",
        "spec_version": 9280
    },
    {
        "call_name": "remove_voter",
        "call_args": [],
        "documentation": "Remove `origin` as a voter.\n\nThis removes the lock and returns the deposit.\n\nThe dispatch origin of this call must be signed and be a voter.",
        "module_prefix": "PhragmenElection",
        "module_name": "PhragmenElection",
        "spec_version": 9280
    },
    {
        "call_name": "submit_candidacy",
        "call_args": [
            {
                "name": "candidate_count",
                "type": 123,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Submit oneself for candidacy. A fixed amount of deposit is recorded.\n\nAll candidates are wiped at the end of the term. They either become a member/runner-up,\nor leave the system while their deposit is slashed.\n\nThe dispatch origin of this call must be signed.\n\n### Warning\n\nEven if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]\nto get their deposit back. Losing the spot in an election will always lead to a slash.\n\n# <weight>\nThe number of current candidates must be provided as witness data.\n# </weight>",
        "module_prefix": "PhragmenElection",
        "module_name": "PhragmenElection",
        "spec_version": 9280
    },
    {
        "call_name": "renounce_candidacy",
        "call_args": [
            {
                "name": "renouncing",
                "type": 239,
                "typeName": "Renouncing",
                "docs": []
            }
        ],
        "documentation": "Renounce one's intention to be a candidate for the next election round. 3 potential\noutcomes exist:\n\n- `origin` is a candidate and not elected in any set. In this case, the deposit is\n  unreserved, returned and origin is removed as a candidate.\n- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and\n  origin is removed as a runner-up.\n- `origin` is a current member. In this case, the deposit is unreserved and origin is\n  removed as a member, consequently not being a candidate for the next round anymore.\n  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they\n  are immediately used. If the prime is renouncing, then no prime will exist until the\n  next round.\n\nThe dispatch origin of this call must be signed, and have one of the above roles.\n\n# <weight>\nThe type of renouncing must be provided as witness data.\n# </weight>",
        "module_prefix": "PhragmenElection",
        "module_name": "PhragmenElection",
        "spec_version": 9280
    },
    {
        "call_name": "remove_member",
        "call_args": [
            {
                "name": "who",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "slash_bond",
                "type": 42,
                "typeName": "bool",
                "docs": []
            },
            {
                "name": "rerun_election",
                "type": 42,
                "typeName": "bool",
                "docs": []
            }
        ],
        "documentation": "Remove a particular member from the set. This is effective immediately and the bond of\nthe outgoing member is slashed.\n\nIf a runner-up is available, then the best runner-up will be removed and replaces the\noutgoing member. Otherwise, if `rerun_election` is `true`, a new phragmen election is\nstarted, else, nothing happens.\n\nIf `slash_bond` is set to true, the bond of the member being removed is slashed. Else,\nit is returned.\n\nThe dispatch origin of this call must be root.\n\nNote that this does not affect the designated block number of the next election.\n\n# <weight>\nIf we have a replacement, we use a small weight. Else, since this is a root call and\nwill go into phragmen, we assume full block for now.\n# </weight>",
        "module_prefix": "PhragmenElection",
        "module_name": "PhragmenElection",
        "spec_version": 9280
    },
    {
        "call_name": "clean_defunct_voters",
        "call_args": [
            {
                "name": "num_voters",
                "type": 4,
                "typeName": "u32",
                "docs": []
            },
            {
                "name": "num_defunct",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The\ndeposit of the removed voters are returned.\n\nThis is an root function to be used only for cleaning the state.\n\nThe dispatch origin of this call must be root.\n\n# <weight>\nThe total number of voters and those that are defunct must be provided as witness data.\n# </weight>",
        "module_prefix": "PhragmenElection",
        "module_name": "PhragmenElection",
        "spec_version": 9280
    },
    {
        "call_name": "add_member",
        "call_args": [
            {
                "name": "who",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            }
        ],
        "documentation": "Add a member `who` to the set.\n\nMay only be called from `T::AddOrigin`.",
        "module_prefix": "TechnicalMembership",
        "module_name": "TechnicalMembership",
        "spec_version": 9280
    },
    {
        "call_name": "remove_member",
        "call_args": [
            {
                "name": "who",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            }
        ],
        "documentation": "Remove a member `who` from the set.\n\nMay only be called from `T::RemoveOrigin`.",
        "module_prefix": "TechnicalMembership",
        "module_name": "TechnicalMembership",
        "spec_version": 9280
    },
    {
        "call_name": "swap_member",
        "call_args": [
            {
                "name": "remove",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "add",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            }
        ],
        "documentation": "Swap out one member `remove` for another `add`.\n\nMay only be called from `T::SwapOrigin`.\n\nPrime membership is *not* passed from `remove` to `add`, if extant.",
        "module_prefix": "TechnicalMembership",
        "module_name": "TechnicalMembership",
        "spec_version": 9280
    },
    {
        "call_name": "reset_members",
        "call_args": [
            {
                "name": "members",
                "type": 61,
                "typeName": "Vec<T::AccountId>",
                "docs": []
            }
        ],
        "documentation": "Change the membership to a new set, disregarding the existing membership. Be nice and\npass `members` pre-sorted.\n\nMay only be called from `T::ResetOrigin`.",
        "module_prefix": "TechnicalMembership",
        "module_name": "TechnicalMembership",
        "spec_version": 9280
    },
    {
        "call_name": "change_key",
        "call_args": [
            {
                "name": "new",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            }
        ],
        "documentation": "Swap out the sending member for some other key `new`.\n\nMay only be called from `Signed` origin of a current member.\n\nPrime membership is passed from the origin account to `new`, if extant.",
        "module_prefix": "TechnicalMembership",
        "module_name": "TechnicalMembership",
        "spec_version": 9280
    },
    {
        "call_name": "set_prime",
        "call_args": [
            {
                "name": "who",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            }
        ],
        "documentation": "Set the prime member. Must be a current member.\n\nMay only be called from `T::PrimeOrigin`.",
        "module_prefix": "TechnicalMembership",
        "module_name": "TechnicalMembership",
        "spec_version": 9280
    },
    {
        "call_name": "clear_prime",
        "call_args": [],
        "documentation": "Remove the prime member if it exists.\n\nMay only be called from `T::PrimeOrigin`.",
        "module_prefix": "TechnicalMembership",
        "module_name": "TechnicalMembership",
        "spec_version": 9280
    },
    {
        "call_name": "propose_spend",
        "call_args": [
            {
                "name": "value",
                "type": 57,
                "typeName": "BalanceOf<T, I>",
                "docs": []
            },
            {
                "name": "beneficiary",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            }
        ],
        "documentation": "Put forward a suggestion for spending. A deposit proportional to the value\nis reserved and slashed if the proposal is rejected. It is returned once the\nproposal is awarded.\n\n# <weight>\n- Complexity: O(1)\n- DbReads: `ProposalCount`, `origin account`\n- DbWrites: `ProposalCount`, `Proposals`, `origin account`\n# </weight>",
        "module_prefix": "Treasury",
        "module_name": "Treasury",
        "spec_version": 9280
    },
    {
        "call_name": "reject_proposal",
        "call_args": [
            {
                "name": "proposal_id",
                "type": 123,
                "typeName": "ProposalIndex",
                "docs": []
            }
        ],
        "documentation": "Reject a proposed spend. The original deposit will be slashed.\n\nMay only be called from `T::RejectOrigin`.\n\n# <weight>\n- Complexity: O(1)\n- DbReads: `Proposals`, `rejected proposer account`\n- DbWrites: `Proposals`, `rejected proposer account`\n# </weight>",
        "module_prefix": "Treasury",
        "module_name": "Treasury",
        "spec_version": 9280
    },
    {
        "call_name": "approve_proposal",
        "call_args": [
            {
                "name": "proposal_id",
                "type": 123,
                "typeName": "ProposalIndex",
                "docs": []
            }
        ],
        "documentation": "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary\nand the original deposit will be returned.\n\nMay only be called from `T::ApproveOrigin`.\n\n# <weight>\n- Complexity: O(1).\n- DbReads: `Proposals`, `Approvals`\n- DbWrite: `Approvals`\n# </weight>",
        "module_prefix": "Treasury",
        "module_name": "Treasury",
        "spec_version": 9280
    },
    {
        "call_name": "spend",
        "call_args": [
            {
                "name": "amount",
                "type": 57,
                "typeName": "BalanceOf<T, I>",
                "docs": []
            },
            {
                "name": "beneficiary",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            }
        ],
        "documentation": "Propose and approve a spend of treasury funds.\n\n- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.\n- `amount`: The amount to be transferred from the treasury to the `beneficiary`.\n- `beneficiary`: The destination account for the transfer.\n\nNOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the\nbeneficiary.",
        "module_prefix": "Treasury",
        "module_name": "Treasury",
        "spec_version": 9280
    },
    {
        "call_name": "remove_approval",
        "call_args": [
            {
                "name": "proposal_id",
                "type": 123,
                "typeName": "ProposalIndex",
                "docs": []
            }
        ],
        "documentation": "Force a previously approved proposal to be removed from the approval queue.\nThe original deposit will no longer be returned.\n\nMay only be called from `T::RejectOrigin`.\n- `proposal_id`: The index of a proposal\n\n# <weight>\n- Complexity: O(A) where `A` is the number of approvals\n- Db reads and writes: `Approvals`\n# </weight>\n\nErrors:\n- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,\ni.e., the proposal has not been approved. This could also mean the proposal does not\nexist altogether, thus there is no way it would have been approved in the first place.",
        "module_prefix": "Treasury",
        "module_name": "Treasury",
        "spec_version": 9280
    },
    {
        "call_name": "claim",
        "call_args": [
            {
                "name": "dest",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "ethereum_signature",
                "type": 243,
                "typeName": "EcdsaSignature",
                "docs": []
            }
        ],
        "documentation": "Make a claim to collect your DOTs.\n\nThe dispatch origin for this call must be _None_.\n\nUnsigned Validation:\nA call to claim is deemed valid if the signature provided matches\nthe expected signed message of:\n\n> Ethereum Signed Message:\n> (configured prefix string)(address)\n\nand `address` matches the `dest` account.\n\nParameters:\n- `dest`: The destination account to payout the claim.\n- `ethereum_signature`: The signature of an ethereum signed message\n   matching the format described above.\n\n<weight>\nThe weight of this call is invariant over the input parameters.\nWeight includes logic to validate unsigned `claim` call.\n\nTotal Complexity: O(1)\n</weight>",
        "module_prefix": "Claims",
        "module_name": "Claims",
        "spec_version": 9280
    },
    {
        "call_name": "mint_claim",
        "call_args": [
            {
                "name": "who",
                "type": 73,
                "typeName": "EthereumAddress",
                "docs": []
            },
            {
                "name": "value",
                "type": 6,
                "typeName": "BalanceOf<T>",
                "docs": []
            },
            {
                "name": "vesting_schedule",
                "type": 245,
                "typeName": "Option<(BalanceOf<T>, BalanceOf<T>, T::BlockNumber)>",
                "docs": []
            },
            {
                "name": "statement",
                "type": 247,
                "typeName": "Option<StatementKind>",
                "docs": []
            }
        ],
        "documentation": "Mint a new claim to collect DOTs.\n\nThe dispatch origin for this call must be _Root_.\n\nParameters:\n- `who`: The Ethereum address allowed to collect this claim.\n- `value`: The number of DOTs that will be claimed.\n- `vesting_schedule`: An optional vesting schedule for these DOTs.\n\n<weight>\nThe weight of this call is invariant over the input parameters.\nWe assume worst case that both vesting and statement is being inserted.\n\nTotal Complexity: O(1)\n</weight>",
        "module_prefix": "Claims",
        "module_name": "Claims",
        "spec_version": 9280
    },
    {
        "call_name": "claim_attest",
        "call_args": [
            {
                "name": "dest",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "ethereum_signature",
                "type": 243,
                "typeName": "EcdsaSignature",
                "docs": []
            },
            {
                "name": "statement",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Make a claim to collect your DOTs by signing a statement.\n\nThe dispatch origin for this call must be _None_.\n\nUnsigned Validation:\nA call to `claim_attest` is deemed valid if the signature provided matches\nthe expected signed message of:\n\n> Ethereum Signed Message:\n> (configured prefix string)(address)(statement)\n\nand `address` matches the `dest` account; the `statement` must match that which is\nexpected according to your purchase arrangement.\n\nParameters:\n- `dest`: The destination account to payout the claim.\n- `ethereum_signature`: The signature of an ethereum signed message\n   matching the format described above.\n- `statement`: The identity of the statement which is being attested to in the signature.\n\n<weight>\nThe weight of this call is invariant over the input parameters.\nWeight includes logic to validate unsigned `claim_attest` call.\n\nTotal Complexity: O(1)\n</weight>",
        "module_prefix": "Claims",
        "module_name": "Claims",
        "spec_version": 9280
    },
    {
        "call_name": "attest",
        "call_args": [
            {
                "name": "statement",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Attest to a statement, needed to finalize the claims process.\n\nWARNING: Insecure unless your chain includes `PrevalidateAttests` as a `SignedExtension`.\n\nUnsigned Validation:\nA call to attest is deemed valid if the sender has a `Preclaim` registered\nand provides a `statement` which is expected for the account.\n\nParameters:\n- `statement`: The identity of the statement which is being attested to in the signature.\n\n<weight>\nThe weight of this call is invariant over the input parameters.\nWeight includes logic to do pre-validation on `attest` call.\n\nTotal Complexity: O(1)\n</weight>",
        "module_prefix": "Claims",
        "module_name": "Claims",
        "spec_version": 9280
    },
    {
        "call_name": "move_claim",
        "call_args": [
            {
                "name": "old",
                "type": 73,
                "typeName": "EthereumAddress",
                "docs": []
            },
            {
                "name": "new",
                "type": 73,
                "typeName": "EthereumAddress",
                "docs": []
            },
            {
                "name": "maybe_preclaim",
                "type": 92,
                "typeName": "Option<T::AccountId>",
                "docs": []
            }
        ],
        "documentation": "",
        "module_prefix": "Claims",
        "module_name": "Claims",
        "spec_version": 9280
    },
    {
        "call_name": "vest",
        "call_args": [],
        "documentation": "Unlock any vested funds of the sender account.\n\nThe dispatch origin for this call must be _Signed_ and the sender must have funds still\nlocked under this pallet.\n\nEmits either `VestingCompleted` or `VestingUpdated`.\n\n# <weight>\n- `O(1)`.\n- DbWeight: 2 Reads, 2 Writes\n    - Reads: Vesting Storage, Balances Locks, [Sender Account]\n    - Writes: Vesting Storage, Balances Locks, [Sender Account]\n# </weight>",
        "module_prefix": "Vesting",
        "module_name": "Vesting",
        "spec_version": 9280
    },
    {
        "call_name": "vest_other",
        "call_args": [
            {
                "name": "target",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            }
        ],
        "documentation": "Unlock any vested funds of a `target` account.\n\nThe dispatch origin for this call must be _Signed_.\n\n- `target`: The account whose vested funds should be unlocked. Must have funds still\nlocked under this pallet.\n\nEmits either `VestingCompleted` or `VestingUpdated`.\n\n# <weight>\n- `O(1)`.\n- DbWeight: 3 Reads, 3 Writes\n    - Reads: Vesting Storage, Balances Locks, Target Account\n    - Writes: Vesting Storage, Balances Locks, Target Account\n# </weight>",
        "module_prefix": "Vesting",
        "module_name": "Vesting",
        "spec_version": 9280
    },
    {
        "call_name": "vested_transfer",
        "call_args": [
            {
                "name": "target",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "schedule",
                "type": 250,
                "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                "docs": []
            }
        ],
        "documentation": "Create a vested transfer.\n\nThe dispatch origin for this call must be _Signed_.\n\n- `target`: The account receiving the vested funds.\n- `schedule`: The vesting schedule attached to the transfer.\n\nEmits `VestingCreated`.\n\nNOTE: This will unlock all schedules through the current block.\n\n# <weight>\n- `O(1)`.\n- DbWeight: 3 Reads, 3 Writes\n    - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]\n    - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]\n# </weight>",
        "module_prefix": "Vesting",
        "module_name": "Vesting",
        "spec_version": 9280
    },
    {
        "call_name": "force_vested_transfer",
        "call_args": [
            {
                "name": "source",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "target",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "schedule",
                "type": 250,
                "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                "docs": []
            }
        ],
        "documentation": "Force a vested transfer.\n\nThe dispatch origin for this call must be _Root_.\n\n- `source`: The account whose funds should be transferred.\n- `target`: The account that should be transferred the vested funds.\n- `schedule`: The vesting schedule attached to the transfer.\n\nEmits `VestingCreated`.\n\nNOTE: This will unlock all schedules through the current block.\n\n# <weight>\n- `O(1)`.\n- DbWeight: 4 Reads, 4 Writes\n    - Reads: Vesting Storage, Balances Locks, Target Account, Source Account\n    - Writes: Vesting Storage, Balances Locks, Target Account, Source Account\n# </weight>",
        "module_prefix": "Vesting",
        "module_name": "Vesting",
        "spec_version": 9280
    },
    {
        "call_name": "merge_schedules",
        "call_args": [
            {
                "name": "schedule1_index",
                "type": 4,
                "typeName": "u32",
                "docs": []
            },
            {
                "name": "schedule2_index",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Merge two vesting schedules together, creating a new vesting schedule that unlocks over\nthe highest possible start and end blocks. If both schedules have already started the\ncurrent block will be used as the schedule start; with the caveat that if one schedule\nis finished by the current block, the other will be treated as the new merged schedule,\nunmodified.\n\nNOTE: If `schedule1_index == schedule2_index` this is a no-op.\nNOTE: This will unlock all schedules through the current block prior to merging.\nNOTE: If both schedules have ended by the current block, no new schedule will be created\nand both will be removed.\n\nMerged schedule attributes:\n- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,\n  current_block)`.\n- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.\n- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.\n\nThe dispatch origin for this call must be _Signed_.\n\n- `schedule1_index`: index of the first schedule to merge.\n- `schedule2_index`: index of the second schedule to merge.",
        "module_prefix": "Vesting",
        "module_name": "Vesting",
        "spec_version": 9280
    },
    {
        "call_name": "batch",
        "call_args": [
            {
                "name": "calls",
                "type": 252,
                "typeName": "Vec<<T as Config>::Call>",
                "docs": []
            }
        ],
        "documentation": "Send a batch of dispatch calls.\n\nMay be called from any origin.\n\n- `calls`: The calls to be dispatched from the same origin. The number of call must not\n  exceed the constant: `batched_calls_limit` (available in constant metadata).\n\nIf origin is root then call are dispatch without checking origin filter. (This includes\nbypassing `frame_system::Config::BaseCallFilter`).\n\n# <weight>\n- Complexity: O(C) where C is the number of calls to be batched.\n# </weight>\n\nThis will return `Ok` in all circumstances. To determine the success of the batch, an\nevent is deposited. If a call failed and the batch was interrupted, then the\n`BatchInterrupted` event is deposited, along with the number of successful calls made\nand the error of the failed call. If all were successful, then the `BatchCompleted`\nevent is deposited.",
        "module_prefix": null,
        "module_name": "Utility",
        "spec_version": 9280
    },
    {
        "call_name": "as_derivative",
        "call_args": [
            {
                "name": "index",
                "type": 80,
                "typeName": "u16",
                "docs": []
            },
            {
                "name": "call",
                "type": 180,
                "typeName": "Box<<T as Config>::Call>",
                "docs": []
            }
        ],
        "documentation": "Send a call through an indexed pseudonym of the sender.\n\nFilter from origin are passed along. The call will be dispatched with an origin which\nuse the same filter as the origin of this call.\n\nNOTE: If you need to ensure that any account-based filtering is not honored (i.e.\nbecause you expect `proxy` to have been used prior in the call stack and you do not want\nthe call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`\nin the Multisig pallet instead.\n\nNOTE: Prior to version *12, this was called `as_limited_sub`.\n\nThe dispatch origin for this call must be _Signed_.",
        "module_prefix": null,
        "module_name": "Utility",
        "spec_version": 9280
    },
    {
        "call_name": "batch_all",
        "call_args": [
            {
                "name": "calls",
                "type": 252,
                "typeName": "Vec<<T as Config>::Call>",
                "docs": []
            }
        ],
        "documentation": "Send a batch of dispatch calls and atomically execute them.\nThe whole transaction will rollback and fail if any of the calls failed.\n\nMay be called from any origin.\n\n- `calls`: The calls to be dispatched from the same origin. The number of call must not\n  exceed the constant: `batched_calls_limit` (available in constant metadata).\n\nIf origin is root then call are dispatch without checking origin filter. (This includes\nbypassing `frame_system::Config::BaseCallFilter`).\n\n# <weight>\n- Complexity: O(C) where C is the number of calls to be batched.\n# </weight>",
        "module_prefix": null,
        "module_name": "Utility",
        "spec_version": 9280
    },
    {
        "call_name": "dispatch_as",
        "call_args": [
            {
                "name": "as_origin",
                "type": 253,
                "typeName": "Box<T::PalletsOrigin>",
                "docs": []
            },
            {
                "name": "call",
                "type": 180,
                "typeName": "Box<<T as Config>::Call>",
                "docs": []
            }
        ],
        "documentation": "Dispatches a function call with a provided origin.\n\nThe dispatch origin for this call must be _Root_.\n\n# <weight>\n- O(1).\n- Limited storage reads.\n- One DB write (event).\n- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().\n# </weight>",
        "module_prefix": null,
        "module_name": "Utility",
        "spec_version": 9280
    },
    {
        "call_name": "force_batch",
        "call_args": [
            {
                "name": "calls",
                "type": 252,
                "typeName": "Vec<<T as Config>::Call>",
                "docs": []
            }
        ],
        "documentation": "Send a batch of dispatch calls.\nUnlike `batch`, it allows errors and won't interrupt.\n\nMay be called from any origin.\n\n- `calls`: The calls to be dispatched from the same origin. The number of call must not\n  exceed the constant: `batched_calls_limit` (available in constant metadata).\n\nIf origin is root then call are dispatch without checking origin filter. (This includes\nbypassing `frame_system::Config::BaseCallFilter`).\n\n# <weight>\n- Complexity: O(C) where C is the number of calls to be batched.\n# </weight>",
        "module_prefix": null,
        "module_name": "Utility",
        "spec_version": 9280
    },
    {
        "call_name": "add_registrar",
        "call_args": [
            {
                "name": "account",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            }
        ],
        "documentation": "Add a registrar to the system.\n\nThe dispatch origin for this call must be `T::RegistrarOrigin`.\n\n- `account`: the account of the registrar.\n\nEmits `RegistrarAdded` if successful.\n\n# <weight>\n- `O(R)` where `R` registrar-count (governance-bounded and code-bounded).\n- One storage mutation (codec `O(R)`).\n- One event.\n# </weight>",
        "module_prefix": "Identity",
        "module_name": "Identity",
        "spec_version": 9280
    },
    {
        "call_name": "set_identity",
        "call_args": [
            {
                "name": "info",
                "type": 261,
                "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                "docs": []
            }
        ],
        "documentation": "Set an account's identity information and reserve the appropriate deposit.\n\nIf the account already has identity information, the deposit is taken as part payment\nfor the new deposit.\n\nThe dispatch origin for this call must be _Signed_.\n\n- `info`: The identity information.\n\nEmits `IdentitySet` if successful.\n\n# <weight>\n- `O(X + X' + R)`\n  - where `X` additional-field-count (deposit-bounded and code-bounded)\n  - where `R` judgements-count (registrar-count-bounded)\n- One balance reserve operation.\n- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).\n- One event.\n# </weight>",
        "module_prefix": "Identity",
        "module_name": "Identity",
        "spec_version": 9280
    },
    {
        "call_name": "set_subs",
        "call_args": [
            {
                "name": "subs",
                "type": 295,
                "typeName": "Vec<(T::AccountId, Data)>",
                "docs": []
            }
        ],
        "documentation": "Set the sub-accounts of the sender.\n\nPayment: Any aggregate balance reserved by previous `set_subs` calls will be returned\nand an amount `SubAccountDeposit` will be reserved for each item in `subs`.\n\nThe dispatch origin for this call must be _Signed_ and the sender must have a registered\nidentity.\n\n- `subs`: The identity's (new) sub-accounts.\n\n# <weight>\n- `O(P + S)`\n  - where `P` old-subs-count (hard- and deposit-bounded).\n  - where `S` subs-count (hard- and deposit-bounded).\n- At most one balance operations.\n- DB:\n  - `P + S` storage mutations (codec complexity `O(1)`)\n  - One storage read (codec complexity `O(P)`).\n  - One storage write (codec complexity `O(S)`).\n  - One storage-exists (`IdentityOf::contains_key`).\n# </weight>",
        "module_prefix": "Identity",
        "module_name": "Identity",
        "spec_version": 9280
    },
    {
        "call_name": "clear_identity",
        "call_args": [],
        "documentation": "Clear an account's identity info and all sub-accounts and return all deposits.\n\nPayment: All reserved balances on the account are returned.\n\nThe dispatch origin for this call must be _Signed_ and the sender must have a registered\nidentity.\n\nEmits `IdentityCleared` if successful.\n\n# <weight>\n- `O(R + S + X)`\n  - where `R` registrar-count (governance-bounded).\n  - where `S` subs-count (hard- and deposit-bounded).\n  - where `X` additional-field-count (deposit-bounded and code-bounded).\n- One balance-unreserve operation.\n- `2` storage reads and `S + 2` storage deletions.\n- One event.\n# </weight>",
        "module_prefix": "Identity",
        "module_name": "Identity",
        "spec_version": 9280
    },
    {
        "call_name": "request_judgement",
        "call_args": [
            {
                "name": "reg_index",
                "type": 123,
                "typeName": "RegistrarIndex",
                "docs": []
            },
            {
                "name": "max_fee",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            }
        ],
        "documentation": "Request a judgement from a registrar.\n\nPayment: At most `max_fee` will be reserved for payment to the registrar if judgement\ngiven.\n\nThe dispatch origin for this call must be _Signed_ and the sender must have a\nregistered identity.\n\n- `reg_index`: The index of the registrar whose judgement is requested.\n- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:\n\n```nocompile\nSelf::registrars().get(reg_index).unwrap().fee\n```\n\nEmits `JudgementRequested` if successful.\n\n# <weight>\n- `O(R + X)`.\n- One balance-reserve operation.\n- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.\n- One event.\n# </weight>",
        "module_prefix": "Identity",
        "module_name": "Identity",
        "spec_version": 9280
    },
    {
        "call_name": "cancel_request",
        "call_args": [
            {
                "name": "reg_index",
                "type": 4,
                "typeName": "RegistrarIndex",
                "docs": []
            }
        ],
        "documentation": "Cancel a previous request.\n\nPayment: A previously reserved deposit is returned on success.\n\nThe dispatch origin for this call must be _Signed_ and the sender must have a\nregistered identity.\n\n- `reg_index`: The index of the registrar whose judgement is no longer requested.\n\nEmits `JudgementUnrequested` if successful.\n\n# <weight>\n- `O(R + X)`.\n- One balance-reserve operation.\n- One storage mutation `O(R + X)`.\n- One event\n# </weight>",
        "module_prefix": "Identity",
        "module_name": "Identity",
        "spec_version": 9280
    },
    {
        "call_name": "set_fee",
        "call_args": [
            {
                "name": "index",
                "type": 123,
                "typeName": "RegistrarIndex",
                "docs": []
            },
            {
                "name": "fee",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            }
        ],
        "documentation": "Set the fee required for a judgement to be requested from a registrar.\n\nThe dispatch origin for this call must be _Signed_ and the sender must be the account\nof the registrar whose index is `index`.\n\n- `index`: the index of the registrar whose fee is to be set.\n- `fee`: the new fee.\n\n# <weight>\n- `O(R)`.\n- One storage mutation `O(R)`.\n- Benchmark: 7.315 + R * 0.329 \u00b5s (min squares analysis)\n# </weight>",
        "module_prefix": "Identity",
        "module_name": "Identity",
        "spec_version": 9280
    },
    {
        "call_name": "set_account_id",
        "call_args": [
            {
                "name": "index",
                "type": 123,
                "typeName": "RegistrarIndex",
                "docs": []
            },
            {
                "name": "new",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            }
        ],
        "documentation": "Change the account associated with a registrar.\n\nThe dispatch origin for this call must be _Signed_ and the sender must be the account\nof the registrar whose index is `index`.\n\n- `index`: the index of the registrar whose fee is to be set.\n- `new`: the new account ID.\n\n# <weight>\n- `O(R)`.\n- One storage mutation `O(R)`.\n- Benchmark: 8.823 + R * 0.32 \u00b5s (min squares analysis)\n# </weight>",
        "module_prefix": "Identity",
        "module_name": "Identity",
        "spec_version": 9280
    },
    {
        "call_name": "set_fields",
        "call_args": [
            {
                "name": "index",
                "type": 123,
                "typeName": "RegistrarIndex",
                "docs": []
            },
            {
                "name": "fields",
                "type": 297,
                "typeName": "IdentityFields",
                "docs": []
            }
        ],
        "documentation": "Set the field information for a registrar.\n\nThe dispatch origin for this call must be _Signed_ and the sender must be the account\nof the registrar whose index is `index`.\n\n- `index`: the index of the registrar whose fee is to be set.\n- `fields`: the fields that the registrar concerns themselves with.\n\n# <weight>\n- `O(R)`.\n- One storage mutation `O(R)`.\n- Benchmark: 7.464 + R * 0.325 \u00b5s (min squares analysis)\n# </weight>",
        "module_prefix": "Identity",
        "module_name": "Identity",
        "spec_version": 9280
    },
    {
        "call_name": "provide_judgement",
        "call_args": [
            {
                "name": "reg_index",
                "type": 123,
                "typeName": "RegistrarIndex",
                "docs": []
            },
            {
                "name": "target",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "judgement",
                "type": 299,
                "typeName": "Judgement<BalanceOf<T>>",
                "docs": []
            }
        ],
        "documentation": "Provide a judgement for an account's identity.\n\nThe dispatch origin for this call must be _Signed_ and the sender must be the account\nof the registrar whose index is `reg_index`.\n\n- `reg_index`: the index of the registrar whose judgement is being made.\n- `target`: the account whose identity the judgement is upon. This must be an account\n  with a registered identity.\n- `judgement`: the judgement of the registrar of index `reg_index` about `target`.\n\nEmits `JudgementGiven` if successful.\n\n# <weight>\n- `O(R + X)`.\n- One balance-transfer operation.\n- Up to one account-lookup operation.\n- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.\n- One event.\n# </weight>",
        "module_prefix": "Identity",
        "module_name": "Identity",
        "spec_version": 9280
    },
    {
        "call_name": "kill_identity",
        "call_args": [
            {
                "name": "target",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            }
        ],
        "documentation": "Remove an account's identity and sub-account information and slash the deposits.\n\nPayment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by\n`Slash`. Verification request deposits are not returned; they should be cancelled\nmanually using `cancel_request`.\n\nThe dispatch origin for this call must match `T::ForceOrigin`.\n\n- `target`: the account whose identity the judgement is upon. This must be an account\n  with a registered identity.\n\nEmits `IdentityKilled` if successful.\n\n# <weight>\n- `O(R + S + X)`.\n- One balance-reserve operation.\n- `S + 2` storage mutations.\n- One event.\n# </weight>",
        "module_prefix": "Identity",
        "module_name": "Identity",
        "spec_version": 9280
    },
    {
        "call_name": "add_sub",
        "call_args": [
            {
                "name": "sub",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "data",
                "type": 264,
                "typeName": "Data",
                "docs": []
            }
        ],
        "documentation": "Add the given account to the sender's subs.\n\nPayment: Balance reserved by a previous `set_subs` call for one sub will be repatriated\nto the sender.\n\nThe dispatch origin for this call must be _Signed_ and the sender must have a registered\nsub identity of `sub`.",
        "module_prefix": "Identity",
        "module_name": "Identity",
        "spec_version": 9280
    },
    {
        "call_name": "rename_sub",
        "call_args": [
            {
                "name": "sub",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "data",
                "type": 264,
                "typeName": "Data",
                "docs": []
            }
        ],
        "documentation": "Alter the associated name of the given sub-account.\n\nThe dispatch origin for this call must be _Signed_ and the sender must have a registered\nsub identity of `sub`.",
        "module_prefix": "Identity",
        "module_name": "Identity",
        "spec_version": 9280
    },
    {
        "call_name": "remove_sub",
        "call_args": [
            {
                "name": "sub",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            }
        ],
        "documentation": "Remove the given account from the sender's subs.\n\nPayment: Balance reserved by a previous `set_subs` call for one sub will be repatriated\nto the sender.\n\nThe dispatch origin for this call must be _Signed_ and the sender must have a registered\nsub identity of `sub`.",
        "module_prefix": "Identity",
        "module_name": "Identity",
        "spec_version": 9280
    },
    {
        "call_name": "quit_sub",
        "call_args": [],
        "documentation": "Remove the sender as a sub-account.\n\nPayment: Balance reserved by a previous `set_subs` call for one sub will be repatriated\nto the sender (*not* the original depositor).\n\nThe dispatch origin for this call must be _Signed_ and the sender must have a registered\nsuper-identity.\n\nNOTE: This should not normally be used, but is provided in the case that the non-\ncontroller of an account is maliciously registered as a sub-account.",
        "module_prefix": "Identity",
        "module_name": "Identity",
        "spec_version": 9280
    },
    {
        "call_name": "proxy",
        "call_args": [
            {
                "name": "real",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "force_proxy_type",
                "type": 301,
                "typeName": "Option<T::ProxyType>",
                "docs": []
            },
            {
                "name": "call",
                "type": 180,
                "typeName": "Box<<T as Config>::Call>",
                "docs": []
            }
        ],
        "documentation": "Dispatch the given `call` from an account that the sender is authorised for through\n`add_proxy`.\n\nRemoves any corresponding announcement(s).\n\nThe dispatch origin for this call must be _Signed_.\n\nParameters:\n- `real`: The account that the proxy will make a call on behalf of.\n- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.\n- `call`: The call to be made by the `real` account.\n\n# <weight>\nWeight is a function of the number of proxies the user has (P).\n# </weight>",
        "module_prefix": "Proxy",
        "module_name": "Proxy",
        "spec_version": 9280
    },
    {
        "call_name": "add_proxy",
        "call_args": [
            {
                "name": "delegate",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "proxy_type",
                "type": 79,
                "typeName": "T::ProxyType",
                "docs": []
            },
            {
                "name": "delay",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            }
        ],
        "documentation": "Register a proxy account for the sender that is able to make calls on its behalf.\n\nThe dispatch origin for this call must be _Signed_.\n\nParameters:\n- `proxy`: The account that the `caller` would like to make a proxy.\n- `proxy_type`: The permissions allowed for this proxy account.\n- `delay`: The announcement period required of the initial proxy. Will generally be\nzero.\n\n# <weight>\nWeight is a function of the number of proxies the user has (P).\n# </weight>",
        "module_prefix": "Proxy",
        "module_name": "Proxy",
        "spec_version": 9280
    },
    {
        "call_name": "remove_proxy",
        "call_args": [
            {
                "name": "delegate",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "proxy_type",
                "type": 79,
                "typeName": "T::ProxyType",
                "docs": []
            },
            {
                "name": "delay",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            }
        ],
        "documentation": "Unregister a proxy account for the sender.\n\nThe dispatch origin for this call must be _Signed_.\n\nParameters:\n- `proxy`: The account that the `caller` would like to remove as a proxy.\n- `proxy_type`: The permissions currently enabled for the removed proxy account.\n\n# <weight>\nWeight is a function of the number of proxies the user has (P).\n# </weight>",
        "module_prefix": "Proxy",
        "module_name": "Proxy",
        "spec_version": 9280
    },
    {
        "call_name": "remove_proxies",
        "call_args": [],
        "documentation": "Unregister all proxy accounts for the sender.\n\nThe dispatch origin for this call must be _Signed_.\n\nWARNING: This may be called on accounts created by `anonymous`, however if done, then\nthe unreserved fees will be inaccessible. **All access to this account will be lost.**\n\n# <weight>\nWeight is a function of the number of proxies the user has (P).\n# </weight>",
        "module_prefix": "Proxy",
        "module_name": "Proxy",
        "spec_version": 9280
    },
    {
        "call_name": "anonymous",
        "call_args": [
            {
                "name": "proxy_type",
                "type": 79,
                "typeName": "T::ProxyType",
                "docs": []
            },
            {
                "name": "delay",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            },
            {
                "name": "index",
                "type": 80,
                "typeName": "u16",
                "docs": []
            }
        ],
        "documentation": "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and\ninitialize it with a proxy of `proxy_type` for `origin` sender.\n\nRequires a `Signed` origin.\n\n- `proxy_type`: The type of the proxy that the sender will be registered as over the\nnew account. This will almost always be the most permissive `ProxyType` possible to\nallow for maximum flexibility.\n- `index`: A disambiguation index, in case this is called multiple times in the same\ntransaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just\nwant to use `0`.\n- `delay`: The announcement period required of the initial proxy. Will generally be\nzero.\n\nFails with `Duplicate` if this has already been called in this transaction, from the\nsame sender, with the same parameters.\n\nFails if there are insufficient funds to pay for deposit.\n\n# <weight>\nWeight is a function of the number of proxies the user has (P).\n# </weight>\nTODO: Might be over counting 1 read",
        "module_prefix": "Proxy",
        "module_name": "Proxy",
        "spec_version": 9280
    },
    {
        "call_name": "kill_anonymous",
        "call_args": [
            {
                "name": "spawner",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "proxy_type",
                "type": 79,
                "typeName": "T::ProxyType",
                "docs": []
            },
            {
                "name": "index",
                "type": 80,
                "typeName": "u16",
                "docs": []
            },
            {
                "name": "height",
                "type": 123,
                "typeName": "T::BlockNumber",
                "docs": []
            },
            {
                "name": "ext_index",
                "type": 123,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Removes a previously spawned anonymous proxy.\n\nWARNING: **All access to this account will be lost.** Any funds held in it will be\ninaccessible.\n\nRequires a `Signed` origin, and the sender account must have been created by a call to\n`anonymous` with corresponding parameters.\n\n- `spawner`: The account that originally called `anonymous` to create this account.\n- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.\n- `proxy_type`: The proxy type originally passed to `anonymous`.\n- `height`: The height of the chain when the call to `anonymous` was processed.\n- `ext_index`: The extrinsic index in which the call to `anonymous` was processed.\n\nFails with `NoPermission` in case the caller is not a previously created anonymous\naccount whose `anonymous` call has corresponding parameters.\n\n# <weight>\nWeight is a function of the number of proxies the user has (P).\n# </weight>",
        "module_prefix": "Proxy",
        "module_name": "Proxy",
        "spec_version": 9280
    },
    {
        "call_name": "announce",
        "call_args": [
            {
                "name": "real",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "call_hash",
                "type": 9,
                "typeName": "CallHashOf<T>",
                "docs": []
            }
        ],
        "documentation": "Publish the hash of a proxy-call that will be made in the future.\n\nThis must be called some number of blocks before the corresponding `proxy` is attempted\nif the delay associated with the proxy relationship is greater than zero.\n\nNo more than `MaxPending` announcements may be made at any one time.\n\nThis will take a deposit of `AnnouncementDepositFactor` as well as\n`AnnouncementDepositBase` if there are no other pending announcements.\n\nThe dispatch origin for this call must be _Signed_ and a proxy of `real`.\n\nParameters:\n- `real`: The account that the proxy will make a call on behalf of.\n- `call_hash`: The hash of the call to be made by the `real` account.\n\n# <weight>\nWeight is a function of:\n- A: the number of announcements made.\n- P: the number of proxies the user has.\n# </weight>",
        "module_prefix": "Proxy",
        "module_name": "Proxy",
        "spec_version": 9280
    },
    {
        "call_name": "remove_announcement",
        "call_args": [
            {
                "name": "real",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "call_hash",
                "type": 9,
                "typeName": "CallHashOf<T>",
                "docs": []
            }
        ],
        "documentation": "Remove a given announcement.\n\nMay be called by a proxy account to remove a call they previously announced and return\nthe deposit.\n\nThe dispatch origin for this call must be _Signed_.\n\nParameters:\n- `real`: The account that the proxy will make a call on behalf of.\n- `call_hash`: The hash of the call to be made by the `real` account.\n\n# <weight>\nWeight is a function of:\n- A: the number of announcements made.\n- P: the number of proxies the user has.\n# </weight>",
        "module_prefix": "Proxy",
        "module_name": "Proxy",
        "spec_version": 9280
    },
    {
        "call_name": "reject_announcement",
        "call_args": [
            {
                "name": "delegate",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "call_hash",
                "type": 9,
                "typeName": "CallHashOf<T>",
                "docs": []
            }
        ],
        "documentation": "Remove the given announcement of a delegate.\n\nMay be called by a target (proxied) account to remove a call that one of their delegates\n(`delegate`) has announced they want to execute. The deposit is returned.\n\nThe dispatch origin for this call must be _Signed_.\n\nParameters:\n- `delegate`: The account that previously announced the call.\n- `call_hash`: The hash of the call to be made.\n\n# <weight>\nWeight is a function of:\n- A: the number of announcements made.\n- P: the number of proxies the user has.\n# </weight>",
        "module_prefix": "Proxy",
        "module_name": "Proxy",
        "spec_version": 9280
    },
    {
        "call_name": "proxy_announced",
        "call_args": [
            {
                "name": "delegate",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "real",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "force_proxy_type",
                "type": 301,
                "typeName": "Option<T::ProxyType>",
                "docs": []
            },
            {
                "name": "call",
                "type": 180,
                "typeName": "Box<<T as Config>::Call>",
                "docs": []
            }
        ],
        "documentation": "Dispatch the given `call` from an account that the sender is authorized for through\n`add_proxy`.\n\nRemoves any corresponding announcement(s).\n\nThe dispatch origin for this call must be _Signed_.\n\nParameters:\n- `real`: The account that the proxy will make a call on behalf of.\n- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.\n- `call`: The call to be made by the `real` account.\n\n# <weight>\nWeight is a function of:\n- A: the number of announcements made.\n- P: the number of proxies the user has.\n# </weight>",
        "module_prefix": "Proxy",
        "module_name": "Proxy",
        "spec_version": 9280
    },
    {
        "call_name": "as_multi_threshold_1",
        "call_args": [
            {
                "name": "other_signatories",
                "type": 61,
                "typeName": "Vec<T::AccountId>",
                "docs": []
            },
            {
                "name": "call",
                "type": 180,
                "typeName": "Box<<T as Config>::Call>",
                "docs": []
            }
        ],
        "documentation": "Immediately dispatch a multi-signature call using a single approval from the caller.\n\nThe dispatch origin for this call must be _Signed_.\n\n- `other_signatories`: The accounts (other than the sender) who are part of the\nmulti-signature, but do not participate in the approval process.\n- `call`: The call to be executed.\n\nResult is equivalent to the dispatched result.\n\n# <weight>\nO(Z + C) where Z is the length of the call and C its execution weight.\n-------------------------------\n- DB Weight: None\n- Plus Call Weight\n# </weight>",
        "module_prefix": "Multisig",
        "module_name": "Multisig",
        "spec_version": 9280
    },
    {
        "call_name": "as_multi",
        "call_args": [
            {
                "name": "threshold",
                "type": 80,
                "typeName": "u16",
                "docs": []
            },
            {
                "name": "other_signatories",
                "type": 61,
                "typeName": "Vec<T::AccountId>",
                "docs": []
            },
            {
                "name": "maybe_timepoint",
                "type": 303,
                "typeName": "Option<Timepoint<T::BlockNumber>>",
                "docs": []
            },
            {
                "name": "call",
                "type": 304,
                "typeName": "OpaqueCall<T>",
                "docs": []
            },
            {
                "name": "store_call",
                "type": 42,
                "typeName": "bool",
                "docs": []
            },
            {
                "name": "max_weight",
                "type": 8,
                "typeName": "Weight",
                "docs": []
            }
        ],
        "documentation": "Register approval for a dispatch to be made from a deterministic composite account if\napproved by a total of `threshold - 1` of `other_signatories`.\n\nIf there are enough, then dispatch the call.\n\nPayment: `DepositBase` will be reserved if this is the first approval, plus\n`threshold` times `DepositFactor`. It is returned once this dispatch happens or\nis cancelled.\n\nThe dispatch origin for this call must be _Signed_.\n\n- `threshold`: The total number of approvals for this dispatch before it is executed.\n- `other_signatories`: The accounts (other than the sender) who can approve this\ndispatch. May not be empty.\n- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is\nnot the first approval, then it must be `Some`, with the timepoint (block number and\ntransaction index) of the first approval transaction.\n- `call`: The call to be executed.\n\nNOTE: Unless this is the final approval, you will generally want to use\n`approve_as_multi` instead, since it only requires a hash of the call.\n\nResult is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise\non success, result is `Ok` and the result from the interior call, if it was executed,\nmay be found in the deposited `MultisigExecuted` event.\n\n# <weight>\n- `O(S + Z + Call)`.\n- Up to one balance-reserve or unreserve operation.\n- One passthrough operation, one insert, both `O(S)` where `S` is the number of\n  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.\n- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.\n- One encode & hash, both of complexity `O(S)`.\n- Up to one binary search and insert (`O(logS + S)`).\n- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.\n- One event.\n- The weight of the `call`.\n- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit\n  taken for its lifetime of `DepositBase + threshold * DepositFactor`.\n-------------------------------\n- DB Weight:\n    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)\n    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)\n- Plus Call Weight\n# </weight>",
        "module_prefix": "Multisig",
        "module_name": "Multisig",
        "spec_version": 9280
    },
    {
        "call_name": "approve_as_multi",
        "call_args": [
            {
                "name": "threshold",
                "type": 80,
                "typeName": "u16",
                "docs": []
            },
            {
                "name": "other_signatories",
                "type": 61,
                "typeName": "Vec<T::AccountId>",
                "docs": []
            },
            {
                "name": "maybe_timepoint",
                "type": 303,
                "typeName": "Option<Timepoint<T::BlockNumber>>",
                "docs": []
            },
            {
                "name": "call_hash",
                "type": 1,
                "typeName": "[u8; 32]",
                "docs": []
            },
            {
                "name": "max_weight",
                "type": 8,
                "typeName": "Weight",
                "docs": []
            }
        ],
        "documentation": "Register approval for a dispatch to be made from a deterministic composite account if\napproved by a total of `threshold - 1` of `other_signatories`.\n\nPayment: `DepositBase` will be reserved if this is the first approval, plus\n`threshold` times `DepositFactor`. It is returned once this dispatch happens or\nis cancelled.\n\nThe dispatch origin for this call must be _Signed_.\n\n- `threshold`: The total number of approvals for this dispatch before it is executed.\n- `other_signatories`: The accounts (other than the sender) who can approve this\ndispatch. May not be empty.\n- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is\nnot the first approval, then it must be `Some`, with the timepoint (block number and\ntransaction index) of the first approval transaction.\n- `call_hash`: The hash of the call to be executed.\n\nNOTE: If this is the final approval, you will want to use `as_multi` instead.\n\n# <weight>\n- `O(S)`.\n- Up to one balance-reserve or unreserve operation.\n- One passthrough operation, one insert, both `O(S)` where `S` is the number of\n  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.\n- One encode & hash, both of complexity `O(S)`.\n- Up to one binary search and insert (`O(logS + S)`).\n- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.\n- One event.\n- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit\n  taken for its lifetime of `DepositBase + threshold * DepositFactor`.\n----------------------------------\n- DB Weight:\n    - Read: Multisig Storage, [Caller Account]\n    - Write: Multisig Storage, [Caller Account]\n# </weight>",
        "module_prefix": "Multisig",
        "module_name": "Multisig",
        "spec_version": 9280
    },
    {
        "call_name": "cancel_as_multi",
        "call_args": [
            {
                "name": "threshold",
                "type": 80,
                "typeName": "u16",
                "docs": []
            },
            {
                "name": "other_signatories",
                "type": 61,
                "typeName": "Vec<T::AccountId>",
                "docs": []
            },
            {
                "name": "timepoint",
                "type": 82,
                "typeName": "Timepoint<T::BlockNumber>",
                "docs": []
            },
            {
                "name": "call_hash",
                "type": 1,
                "typeName": "[u8; 32]",
                "docs": []
            }
        ],
        "documentation": "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously\nfor this operation will be unreserved on success.\n\nThe dispatch origin for this call must be _Signed_.\n\n- `threshold`: The total number of approvals for this dispatch before it is executed.\n- `other_signatories`: The accounts (other than the sender) who can approve this\ndispatch. May not be empty.\n- `timepoint`: The timepoint (block number and transaction index) of the first approval\ntransaction for this dispatch.\n- `call_hash`: The hash of the call to be executed.\n\n# <weight>\n- `O(S)`.\n- Up to one balance-reserve or unreserve operation.\n- One passthrough operation, one insert, both `O(S)` where `S` is the number of\n  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.\n- One encode & hash, both of complexity `O(S)`.\n- One event.\n- I/O: 1 read `O(S)`, one remove.\n- Storage: removes one item.\n----------------------------------\n- DB Weight:\n    - Read: Multisig Storage, [Caller Account], Refund Account, Calls\n    - Write: Multisig Storage, [Caller Account], Refund Account, Calls\n# </weight>",
        "module_prefix": "Multisig",
        "module_name": "Multisig",
        "spec_version": 9280
    },
    {
        "call_name": "propose_bounty",
        "call_args": [
            {
                "name": "value",
                "type": 57,
                "typeName": "BalanceOf<T, I>",
                "docs": []
            },
            {
                "name": "description",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Propose a new bounty.\n\nThe dispatch origin for this call must be _Signed_.\n\nPayment: `TipReportDepositBase` will be reserved from the origin account, as well as\n`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,\nor slashed when rejected.\n\n- `curator`: The curator account whom will manage this bounty.\n- `fee`: The curator fee.\n- `value`: The total payment amount of this bounty, curator fee included.\n- `description`: The description of this bounty.",
        "module_prefix": "Bounties",
        "module_name": "Bounties",
        "spec_version": 9280
    },
    {
        "call_name": "approve_bounty",
        "call_args": [
            {
                "name": "bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            }
        ],
        "documentation": "Approve a bounty proposal. At a later time, the bounty will be funded and become active\nand the original deposit will be returned.\n\nMay only be called from `T::ApproveOrigin`.\n\n# <weight>\n- O(1).\n# </weight>",
        "module_prefix": "Bounties",
        "module_name": "Bounties",
        "spec_version": 9280
    },
    {
        "call_name": "propose_curator",
        "call_args": [
            {
                "name": "bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            },
            {
                "name": "curator",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "fee",
                "type": 57,
                "typeName": "BalanceOf<T, I>",
                "docs": []
            }
        ],
        "documentation": "Assign a curator to a funded bounty.\n\nMay only be called from `T::ApproveOrigin`.\n\n# <weight>\n- O(1).\n# </weight>",
        "module_prefix": "Bounties",
        "module_name": "Bounties",
        "spec_version": 9280
    },
    {
        "call_name": "unassign_curator",
        "call_args": [
            {
                "name": "bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            }
        ],
        "documentation": "Unassign curator from a bounty.\n\nThis function can only be called by the `RejectOrigin` a signed origin.\n\nIf this function is called by the `RejectOrigin`, we assume that the curator is\nmalicious or inactive. As a result, we will slash the curator when possible.\n\nIf the origin is the curator, we take this as a sign they are unable to do their job and\nthey willingly give up. We could slash them, but for now we allow them to recover their\ndeposit and exit without issue. (We may want to change this if it is abused.)\n\nFinally, the origin can be anyone if and only if the curator is \"inactive\". This allows\nanyone in the community to call out that a curator is not doing their due diligence, and\nwe should pick a new curator. In this case the curator should also be slashed.\n\n# <weight>\n- O(1).\n# </weight>",
        "module_prefix": "Bounties",
        "module_name": "Bounties",
        "spec_version": 9280
    },
    {
        "call_name": "accept_curator",
        "call_args": [
            {
                "name": "bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            }
        ],
        "documentation": "Accept the curator role for a bounty.\nA deposit will be reserved from curator and refund upon successful payout.\n\nMay only be called from the curator.\n\n# <weight>\n- O(1).\n# </weight>",
        "module_prefix": "Bounties",
        "module_name": "Bounties",
        "spec_version": 9280
    },
    {
        "call_name": "award_bounty",
        "call_args": [
            {
                "name": "bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            },
            {
                "name": "beneficiary",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            }
        ],
        "documentation": "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds\nafter a delay.\n\nThe dispatch origin for this call must be the curator of this bounty.\n\n- `bounty_id`: Bounty ID to award.\n- `beneficiary`: The beneficiary account whom will receive the payout.\n\n# <weight>\n- O(1).\n# </weight>",
        "module_prefix": "Bounties",
        "module_name": "Bounties",
        "spec_version": 9280
    },
    {
        "call_name": "claim_bounty",
        "call_args": [
            {
                "name": "bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            }
        ],
        "documentation": "Claim the payout from an awarded bounty after payout delay.\n\nThe dispatch origin for this call must be the beneficiary of this bounty.\n\n- `bounty_id`: Bounty ID to claim.\n\n# <weight>\n- O(1).\n# </weight>",
        "module_prefix": "Bounties",
        "module_name": "Bounties",
        "spec_version": 9280
    },
    {
        "call_name": "close_bounty",
        "call_args": [
            {
                "name": "bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            }
        ],
        "documentation": "Cancel a proposed or active bounty. All the funds will be sent to treasury and\nthe curator deposit will be unreserved if possible.\n\nOnly `T::RejectOrigin` is able to cancel a bounty.\n\n- `bounty_id`: Bounty ID to cancel.\n\n# <weight>\n- O(1).\n# </weight>",
        "module_prefix": "Bounties",
        "module_name": "Bounties",
        "spec_version": 9280
    },
    {
        "call_name": "extend_bounty_expiry",
        "call_args": [
            {
                "name": "bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            },
            {
                "name": "remark",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Extend the expiry time of an active bounty.\n\nThe dispatch origin for this call must be the curator of this bounty.\n\n- `bounty_id`: Bounty ID to extend.\n- `remark`: additional information.\n\n# <weight>\n- O(1).\n# </weight>",
        "module_prefix": "Bounties",
        "module_name": "Bounties",
        "spec_version": 9280
    },
    {
        "call_name": "add_child_bounty",
        "call_args": [
            {
                "name": "parent_bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            },
            {
                "name": "value",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            },
            {
                "name": "description",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Add a new child-bounty.\n\nThe dispatch origin for this call must be the curator of parent\nbounty and the parent bounty must be in \"active\" state.\n\nChild-bounty gets added successfully & fund gets transferred from\nparent bounty to child-bounty account, if parent bounty has enough\nfunds, else the call fails.\n\nUpper bound to maximum number of active  child bounties that can be\nadded are managed via runtime trait config\n[`Config::MaxActiveChildBountyCount`].\n\nIf the call is success, the status of child-bounty is updated to\n\"Added\".\n\n- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added.\n- `value`: Value for executing the proposal.\n- `description`: Text description for the child-bounty.",
        "module_prefix": "ChildBounties",
        "module_name": "ChildBounties",
        "spec_version": 9280
    },
    {
        "call_name": "propose_curator",
        "call_args": [
            {
                "name": "parent_bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            },
            {
                "name": "child_bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            },
            {
                "name": "curator",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            },
            {
                "name": "fee",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            }
        ],
        "documentation": "Propose curator for funded child-bounty.\n\nThe dispatch origin for this call must be curator of parent bounty.\n\nParent bounty must be in active state, for this child-bounty call to\nwork.\n\nChild-bounty must be in \"Added\" state, for processing the call. And\nstate of child-bounty is moved to \"CuratorProposed\" on successful\ncall completion.\n\n- `parent_bounty_id`: Index of parent bounty.\n- `child_bounty_id`: Index of child bounty.\n- `curator`: Address of child-bounty curator.\n- `fee`: payment fee to child-bounty curator for execution.",
        "module_prefix": "ChildBounties",
        "module_name": "ChildBounties",
        "spec_version": 9280
    },
    {
        "call_name": "accept_curator",
        "call_args": [
            {
                "name": "parent_bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            },
            {
                "name": "child_bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            }
        ],
        "documentation": "Accept the curator role for the child-bounty.\n\nThe dispatch origin for this call must be the curator of this\nchild-bounty.\n\nA deposit will be reserved from the curator and refund upon\nsuccessful payout or cancellation.\n\nFee for curator is deducted from curator fee of parent bounty.\n\nParent bounty must be in active state, for this child-bounty call to\nwork.\n\nChild-bounty must be in \"CuratorProposed\" state, for processing the\ncall. And state of child-bounty is moved to \"Active\" on successful\ncall completion.\n\n- `parent_bounty_id`: Index of parent bounty.\n- `child_bounty_id`: Index of child bounty.",
        "module_prefix": "ChildBounties",
        "module_name": "ChildBounties",
        "spec_version": 9280
    },
    {
        "call_name": "unassign_curator",
        "call_args": [
            {
                "name": "parent_bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            },
            {
                "name": "child_bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            }
        ],
        "documentation": "Unassign curator from a child-bounty.\n\nThe dispatch origin for this call can be either `RejectOrigin`, or\nthe curator of the parent bounty, or any signed origin.\n\nFor the origin other than T::RejectOrigin and the child-bounty\ncurator, parent bounty must be in active state, for this call to\nwork. We allow child-bounty curator and T::RejectOrigin to execute\nthis call irrespective of the parent bounty state.\n\nIf this function is called by the `RejectOrigin` or the\nparent bounty curator, we assume that the child-bounty curator is\nmalicious or inactive. As a result, child-bounty curator deposit is\nslashed.\n\nIf the origin is the child-bounty curator, we take this as a sign\nthat they are unable to do their job, and are willingly giving up.\nWe could slash the deposit, but for now we allow them to unreserve\ntheir deposit and exit without issue. (We may want to change this if\nit is abused.)\n\nFinally, the origin can be anyone iff the child-bounty curator is\n\"inactive\". Expiry update due of parent bounty is used to estimate\ninactive state of child-bounty curator.\n\nThis allows anyone in the community to call out that a child-bounty\ncurator is not doing their due diligence, and we should pick a new\none. In this case the child-bounty curator deposit is slashed.\n\nState of child-bounty is moved to Added state on successful call\ncompletion.\n\n- `parent_bounty_id`: Index of parent bounty.\n- `child_bounty_id`: Index of child bounty.",
        "module_prefix": "ChildBounties",
        "module_name": "ChildBounties",
        "spec_version": 9280
    },
    {
        "call_name": "award_child_bounty",
        "call_args": [
            {
                "name": "parent_bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            },
            {
                "name": "child_bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            },
            {
                "name": "beneficiary",
                "type": 197,
                "typeName": "<T::Lookup as StaticLookup>::Source",
                "docs": []
            }
        ],
        "documentation": "Award child-bounty to a beneficiary.\n\nThe beneficiary will be able to claim the funds after a delay.\n\nThe dispatch origin for this call must be the parent curator or\ncurator of this child-bounty.\n\nParent bounty must be in active state, for this child-bounty call to\nwork.\n\nChild-bounty must be in active state, for processing the call. And\nstate of child-bounty is moved to \"PendingPayout\" on successful call\ncompletion.\n\n- `parent_bounty_id`: Index of parent bounty.\n- `child_bounty_id`: Index of child bounty.\n- `beneficiary`: Beneficiary account.",
        "module_prefix": "ChildBounties",
        "module_name": "ChildBounties",
        "spec_version": 9280
    },
    {
        "call_name": "claim_child_bounty",
        "call_args": [
            {
                "name": "parent_bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            },
            {
                "name": "child_bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            }
        ],
        "documentation": "Claim the payout from an awarded child-bounty after payout delay.\n\nThe dispatch origin for this call may be any signed origin.\n\nCall works independent of parent bounty state, No need for parent\nbounty to be in active state.\n\nThe Beneficiary is paid out with agreed bounty value. Curator fee is\npaid & curator deposit is unreserved.\n\nChild-bounty must be in \"PendingPayout\" state, for processing the\ncall. And instance of child-bounty is removed from the state on\nsuccessful call completion.\n\n- `parent_bounty_id`: Index of parent bounty.\n- `child_bounty_id`: Index of child bounty.",
        "module_prefix": "ChildBounties",
        "module_name": "ChildBounties",
        "spec_version": 9280
    },
    {
        "call_name": "close_child_bounty",
        "call_args": [
            {
                "name": "parent_bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            },
            {
                "name": "child_bounty_id",
                "type": 123,
                "typeName": "BountyIndex",
                "docs": []
            }
        ],
        "documentation": "Cancel a proposed or active child-bounty. Child-bounty account funds\nare transferred to parent bounty account. The child-bounty curator\ndeposit may be unreserved if possible.\n\nThe dispatch origin for this call must be either parent curator or\n`T::RejectOrigin`.\n\nIf the state of child-bounty is `Active`, curator deposit is\nunreserved.\n\nIf the state of child-bounty is `PendingPayout`, call fails &\nreturns `PendingPayout` error.\n\nFor the origin other than T::RejectOrigin, parent bounty must be in\nactive state, for this child-bounty call to work. For origin\nT::RejectOrigin execution is forced.\n\nInstance of child-bounty is removed from the state on successful\ncall completion.\n\n- `parent_bounty_id`: Index of parent bounty.\n- `child_bounty_id`: Index of child bounty.",
        "module_prefix": "ChildBounties",
        "module_name": "ChildBounties",
        "spec_version": 9280
    },
    {
        "call_name": "report_awesome",
        "call_args": [
            {
                "name": "reason",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            },
            {
                "name": "who",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            }
        ],
        "documentation": "Report something `reason` that deserves a tip and claim any eventual the finder's fee.\n\nThe dispatch origin for this call must be _Signed_.\n\nPayment: `TipReportDepositBase` will be reserved from the origin account, as well as\n`DataDepositPerByte` for each byte in `reason`.\n\n- `reason`: The reason for, or the thing that deserves, the tip; generally this will be\n  a UTF-8-encoded URL.\n- `who`: The account which should be credited for the tip.\n\nEmits `NewTip` if successful.\n\n# <weight>\n- Complexity: `O(R)` where `R` length of `reason`.\n  - encoding and hashing of 'reason'\n- DbReads: `Reasons`, `Tips`\n- DbWrites: `Reasons`, `Tips`\n# </weight>",
        "module_prefix": "Tips",
        "module_name": "Tips",
        "spec_version": 9280
    },
    {
        "call_name": "retract_tip",
        "call_args": [
            {
                "name": "hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            }
        ],
        "documentation": "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.\n\nIf successful, the original deposit will be unreserved.\n\nThe dispatch origin for this call must be _Signed_ and the tip identified by `hash`\nmust have been reported by the signing account through `report_awesome` (and not\nthrough `tip_new`).\n\n- `hash`: The identity of the open tip for which a tip value is declared. This is formed\n  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.\n\nEmits `TipRetracted` if successful.\n\n# <weight>\n- Complexity: `O(1)`\n  - Depends on the length of `T::Hash` which is fixed.\n- DbReads: `Tips`, `origin account`\n- DbWrites: `Reasons`, `Tips`, `origin account`\n# </weight>",
        "module_prefix": "Tips",
        "module_name": "Tips",
        "spec_version": 9280
    },
    {
        "call_name": "tip_new",
        "call_args": [
            {
                "name": "reason",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            },
            {
                "name": "who",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "tip_value",
                "type": 57,
                "typeName": "BalanceOf<T, I>",
                "docs": []
            }
        ],
        "documentation": "Give a tip for something new; no finder's fee will be taken.\n\nThe dispatch origin for this call must be _Signed_ and the signing account must be a\nmember of the `Tippers` set.\n\n- `reason`: The reason for, or the thing that deserves, the tip; generally this will be\n  a UTF-8-encoded URL.\n- `who`: The account which should be credited for the tip.\n- `tip_value`: The amount of tip that the sender would like to give. The median tip\n  value of active tippers will be given to the `who`.\n\nEmits `NewTip` if successful.\n\n# <weight>\n- Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.\n  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by\n    `ContainsLengthBound`. The actual cost depends on the implementation of\n    `T::Tippers`.\n  - `O(R)`: hashing and encoding of reason of length `R`\n- DbReads: `Tippers`, `Reasons`\n- DbWrites: `Reasons`, `Tips`\n# </weight>",
        "module_prefix": "Tips",
        "module_name": "Tips",
        "spec_version": 9280
    },
    {
        "call_name": "tip",
        "call_args": [
            {
                "name": "hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            },
            {
                "name": "tip_value",
                "type": 57,
                "typeName": "BalanceOf<T, I>",
                "docs": []
            }
        ],
        "documentation": "Declare a tip value for an already-open tip.\n\nThe dispatch origin for this call must be _Signed_ and the signing account must be a\nmember of the `Tippers` set.\n\n- `hash`: The identity of the open tip for which a tip value is declared. This is formed\n  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary\n  account ID.\n- `tip_value`: The amount of tip that the sender would like to give. The median tip\n  value of active tippers will be given to the `who`.\n\nEmits `TipClosing` if the threshold of tippers has been reached and the countdown period\nhas started.\n\n# <weight>\n- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length\n  `T`, insert tip and check closing, `T` is charged as upper bound given by\n  `ContainsLengthBound`. The actual cost depends on the implementation of `T::Tippers`.\n\n  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it\n  is weighted as if almost full i.e of length `T-1`.\n- DbReads: `Tippers`, `Tips`\n- DbWrites: `Tips`\n# </weight>",
        "module_prefix": "Tips",
        "module_name": "Tips",
        "spec_version": 9280
    },
    {
        "call_name": "close_tip",
        "call_args": [
            {
                "name": "hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            }
        ],
        "documentation": "Close and payout a tip.\n\nThe dispatch origin for this call must be _Signed_.\n\nThe tip identified by `hash` must have finished its countdown period.\n\n- `hash`: The identity of the open tip for which a tip value is declared. This is formed\n  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.\n\n# <weight>\n- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length\n  `T`. `T` is charged as upper bound given by `ContainsLengthBound`. The actual cost\n  depends on the implementation of `T::Tippers`.\n- DbReads: `Tips`, `Tippers`, `tip finder`\n- DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`\n# </weight>",
        "module_prefix": "Tips",
        "module_name": "Tips",
        "spec_version": 9280
    },
    {
        "call_name": "slash_tip",
        "call_args": [
            {
                "name": "hash",
                "type": 9,
                "typeName": "T::Hash",
                "docs": []
            }
        ],
        "documentation": "Remove and slash an already-open tip.\n\nMay only be called from `T::RejectOrigin`.\n\nAs a result, the finder is slashed and the deposits are lost.\n\nEmits `TipSlashed` if successful.\n\n# <weight>\n  `T` is charged as upper bound given by `ContainsLengthBound`.\n  The actual cost depends on the implementation of `T::Tippers`.\n# </weight>",
        "module_prefix": "Tips",
        "module_name": "Tips",
        "spec_version": 9280
    },
    {
        "call_name": "submit_unsigned",
        "call_args": [
            {
                "name": "raw_solution",
                "type": 309,
                "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                "docs": []
            },
            {
                "name": "witness",
                "type": 362,
                "typeName": "SolutionOrSnapshotSize",
                "docs": []
            }
        ],
        "documentation": "Submit a solution for the unsigned phase.\n\nThe dispatch origin fo this call must be __none__.\n\nThis submission is checked on the fly. Moreover, this unsigned solution is only\nvalidated when submitted to the pool from the **local** node. Effectively, this means\nthat only active validators can submit this transaction when authoring a block (similar\nto an inherent).\n\nTo prevent any incorrect solution (and thus wasted time/weight), this transaction will\npanic if the solution submitted by the validator is invalid in any way, effectively\nputting their authoring reward at risk.\n\nNo deposit or reward is associated with this submission.",
        "module_prefix": "ElectionProviderMultiPhase",
        "module_name": "ElectionProviderMultiPhase",
        "spec_version": 9280
    },
    {
        "call_name": "set_minimum_untrusted_score",
        "call_args": [
            {
                "name": "maybe_next_score",
                "type": 363,
                "typeName": "Option<ElectionScore>",
                "docs": []
            }
        ],
        "documentation": "Set a new value for `MinimumUntrustedScore`.\n\nDispatch origin must be aligned with `T::ForceOrigin`.\n\nThis check can be turned off by setting the value to `None`.",
        "module_prefix": "ElectionProviderMultiPhase",
        "module_name": "ElectionProviderMultiPhase",
        "spec_version": 9280
    },
    {
        "call_name": "set_emergency_election_result",
        "call_args": [
            {
                "name": "supports",
                "type": 364,
                "typeName": "Supports<T::AccountId>",
                "docs": []
            }
        ],
        "documentation": "Set a solution in the queue, to be handed out to the client of this pallet in the next\ncall to `ElectionProvider::elect`.\n\nThis can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.\n\nThe solution is not checked for any feasibility and is assumed to be trustworthy, as any\nfeasibility check itself can in principle cause the election process to fail (due to\nmemory/weight constrains).",
        "module_prefix": "ElectionProviderMultiPhase",
        "module_name": "ElectionProviderMultiPhase",
        "spec_version": 9280
    },
    {
        "call_name": "submit",
        "call_args": [
            {
                "name": "raw_solution",
                "type": 309,
                "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                "docs": []
            }
        ],
        "documentation": "Submit a solution for the signed phase.\n\nThe dispatch origin fo this call must be __signed__.\n\nThe solution is potentially queued, based on the claimed score and processed at the end\nof the signed phase.\n\nA deposit is reserved and recorded for the solution. Based on the outcome, the solution\nmight be rewarded, slashed, or get all or a part of the deposit back.",
        "module_prefix": "ElectionProviderMultiPhase",
        "module_name": "ElectionProviderMultiPhase",
        "spec_version": 9280
    },
    {
        "call_name": "governance_fallback",
        "call_args": [
            {
                "name": "maybe_max_voters",
                "type": 235,
                "typeName": "Option<u32>",
                "docs": []
            },
            {
                "name": "maybe_max_targets",
                "type": 235,
                "typeName": "Option<u32>",
                "docs": []
            }
        ],
        "documentation": "Trigger the governance fallback.\n\nThis can only be called when [`Phase::Emergency`] is enabled, as an alternative to\ncalling [`Call::set_emergency_election_result`].",
        "module_prefix": "ElectionProviderMultiPhase",
        "module_name": "ElectionProviderMultiPhase",
        "spec_version": 9280
    },
    {
        "call_name": "rebag",
        "call_args": [
            {
                "name": "dislocated",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            }
        ],
        "documentation": "Declare that some `dislocated` account has, through rewards or penalties, sufficiently\nchanged its score that it should properly fall into a different bag than its current\none.\n\nAnyone can call this function about any potentially dislocated account.\n\nWill always update the stored score of `dislocated` to the correct score, based on\n`ScoreProvider`.\n\nIf `dislocated` does not exists, it returns an error.",
        "module_prefix": "VoterList",
        "module_name": "VoterList",
        "spec_version": 9280
    },
    {
        "call_name": "put_in_front_of",
        "call_args": [
            {
                "name": "lighter",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            }
        ],
        "documentation": "Move the caller's Id directly in front of `lighter`.\n\nThe dispatch origin for this call must be _Signed_ and can only be called by the Id of\nthe account going in front of `lighter`.\n\nOnly works if\n- both nodes are within the same bag,\n- and `origin` has a greater `Score` than `lighter`.",
        "module_prefix": "VoterList",
        "module_name": "VoterList",
        "spec_version": 9280
    },
    {
        "call_name": "join",
        "call_args": [
            {
                "name": "amount",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            },
            {
                "name": "pool_id",
                "type": 4,
                "typeName": "PoolId",
                "docs": []
            }
        ],
        "documentation": "Stake funds with a pool. The amount to bond is transferred from the member to the\npools account and immediately increases the pools bond.\n\n# Note\n\n* An account can only be a member of a single pool.\n* An account cannot join the same pool multiple times.\n* This call will *not* dust the member account, so the member must have at least\n  `existential deposit + amount` in their account.\n* Only a pool with [`PoolState::Open`] can be joined",
        "module_prefix": "NominationPools",
        "module_name": "NominationPools",
        "spec_version": 9280
    },
    {
        "call_name": "bond_extra",
        "call_args": [
            {
                "name": "extra",
                "type": 369,
                "typeName": "BondExtra<BalanceOf<T>>",
                "docs": []
            }
        ],
        "documentation": "Bond `extra` more funds from `origin` into the pool to which they already belong.\n\nAdditional funds can come from either the free balance of the account, of from the\naccumulated rewards, see [`BondExtra`].\n\nBonding extra funds implies an automatic payout of all pending rewards as well.",
        "module_prefix": "NominationPools",
        "module_name": "NominationPools",
        "spec_version": 9280
    },
    {
        "call_name": "claim_payout",
        "call_args": [],
        "documentation": "A bonded member can use this to claim their payout based on the rewards that the pool\nhas accumulated since their last claimed payout (OR since joining if this is there first\ntime claiming rewards). The payout will be transferred to the member's account.\n\nThe member will earn rewards pro rata based on the members stake vs the sum of the\nmembers in the pools stake. Rewards do not \"expire\".",
        "module_prefix": "NominationPools",
        "module_name": "NominationPools",
        "spec_version": 9280
    },
    {
        "call_name": "unbond",
        "call_args": [
            {
                "name": "member_account",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "unbonding_points",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            }
        ],
        "documentation": "Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It\nimplicitly collects the rewards one last time, since not doing so would mean some\nrewards would be forfeited.\n\nUnder certain conditions, this call can be dispatched permissionlessly (i.e. by any\naccount).\n\n# Conditions for a permissionless dispatch.\n\n* The pool is blocked and the caller is either the root or state-toggler. This is\n  refereed to as a kick.\n* The pool is destroying and the member is not the depositor.\n* The pool is destroying, the member is the depositor and no other members are in the\n  pool.\n\n## Conditions for permissioned dispatch (i.e. the caller is also the\n`member_account`):\n\n* The caller is not the depositor.\n* The caller is the depositor, the pool is destroying and no other members are in the\n  pool.\n\n# Note\n\nIf there are too many unlocking chunks to unbond with the pool account,\n[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks. If\nthere are too many unlocking chunks, the result of this call will likely be the\n`NoMoreChunks` error from the staking system.",
        "module_prefix": "NominationPools",
        "module_name": "NominationPools",
        "spec_version": 9280
    },
    {
        "call_name": "pool_withdraw_unbonded",
        "call_args": [
            {
                "name": "pool_id",
                "type": 4,
                "typeName": "PoolId",
                "docs": []
            },
            {
                "name": "num_slashing_spans",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Call `withdraw_unbonded` for the pools account. This call can be made by any account.\n\nThis is useful if their are too many unlocking chunks to call `unbond`, and some\ncan be cleared by withdrawing. In the case there are too many unlocking chunks, the user\nwould probably see an error like `NoMoreChunks` emitted from the staking system when\nthey attempt to unbond.",
        "module_prefix": "NominationPools",
        "module_name": "NominationPools",
        "spec_version": 9280
    },
    {
        "call_name": "withdraw_unbonded",
        "call_args": [
            {
                "name": "member_account",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "num_slashing_spans",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an\nerror is returned.\n\nUnder certain conditions, this call can be dispatched permissionlessly (i.e. by any\naccount).\n\n# Conditions for a permissionless dispatch\n\n* The pool is in destroy mode and the target is not the depositor.\n* The target is the depositor and they are the only member in the sub pools.\n* The pool is blocked and the caller is either the root or state-toggler.\n\n# Conditions for permissioned dispatch\n\n* The caller is the target and they are not the depositor.\n\n# Note\n\nIf the target is the depositor, the pool will be destroyed.",
        "module_prefix": "NominationPools",
        "module_name": "NominationPools",
        "spec_version": 9280
    },
    {
        "call_name": "create",
        "call_args": [
            {
                "name": "amount",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            },
            {
                "name": "root",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "nominator",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "state_toggler",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            }
        ],
        "documentation": "Create a new delegation pool.\n\n# Arguments\n\n* `amount` - The amount of funds to delegate to the pool. This also acts of a sort of\n  deposit since the pools creator cannot fully unbond funds until the pool is being\n  destroyed.\n* `index` - A disambiguation index for creating the account. Likely only useful when\n  creating multiple pools in the same extrinsic.\n* `root` - The account to set as [`PoolRoles::root`].\n* `nominator` - The account to set as the [`PoolRoles::nominator`].\n* `state_toggler` - The account to set as the [`PoolRoles::state_toggler`].\n\n# Note\n\nIn addition to `amount`, the caller will transfer the existential deposit; so the caller\nneeds at have at least `amount + existential_deposit` transferrable.",
        "module_prefix": "NominationPools",
        "module_name": "NominationPools",
        "spec_version": 9280
    },
    {
        "call_name": "nominate",
        "call_args": [
            {
                "name": "pool_id",
                "type": 4,
                "typeName": "PoolId",
                "docs": []
            },
            {
                "name": "validators",
                "type": 61,
                "typeName": "Vec<T::AccountId>",
                "docs": []
            }
        ],
        "documentation": "Nominate on behalf of the pool.\n\nThe dispatch origin of this call must be signed by the pool nominator or the pool\nroot role.\n\nThis directly forward the call to the staking pallet, on behalf of the pool bonded\naccount.",
        "module_prefix": "NominationPools",
        "module_name": "NominationPools",
        "spec_version": 9280
    },
    {
        "call_name": "set_state",
        "call_args": [
            {
                "name": "pool_id",
                "type": 4,
                "typeName": "PoolId",
                "docs": []
            },
            {
                "name": "state",
                "type": 91,
                "typeName": "PoolState",
                "docs": []
            }
        ],
        "documentation": "Set a new state for the pool.\n\nIf a pool is already in the `Destroying` state, then under no condition can its state\nchange again.\n\nThe dispatch origin of this call must be either:\n\n1. signed by the state toggler, or the root role of the pool,\n2. if the pool conditions to be open are NOT met (as described by `ok_to_be_open`), and\n   then the state of the pool can be permissionlessly changed to `Destroying`.",
        "module_prefix": "NominationPools",
        "module_name": "NominationPools",
        "spec_version": 9280
    },
    {
        "call_name": "set_metadata",
        "call_args": [
            {
                "name": "pool_id",
                "type": 4,
                "typeName": "PoolId",
                "docs": []
            },
            {
                "name": "metadata",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Set a new metadata for the pool.\n\nThe dispatch origin of this call must be signed by the state toggler, or the root role\nof the pool.",
        "module_prefix": "NominationPools",
        "module_name": "NominationPools",
        "spec_version": 9280
    },
    {
        "call_name": "set_configs",
        "call_args": [
            {
                "name": "min_join_bond",
                "type": 370,
                "typeName": "ConfigOp<BalanceOf<T>>",
                "docs": []
            },
            {
                "name": "min_create_bond",
                "type": 370,
                "typeName": "ConfigOp<BalanceOf<T>>",
                "docs": []
            },
            {
                "name": "max_pools",
                "type": 371,
                "typeName": "ConfigOp<u32>",
                "docs": []
            },
            {
                "name": "max_members",
                "type": 371,
                "typeName": "ConfigOp<u32>",
                "docs": []
            },
            {
                "name": "max_members_per_pool",
                "type": 371,
                "typeName": "ConfigOp<u32>",
                "docs": []
            }
        ],
        "documentation": "Update configurations for the nomination pools. The origin for this call must be\nRoot.\n\n# Arguments\n\n* `min_join_bond` - Set [`MinJoinBond`].\n* `min_create_bond` - Set [`MinCreateBond`].\n* `max_pools` - Set [`MaxPools`].\n* `max_members` - Set [`MaxPoolMembers`].\n* `max_members_per_pool` - Set [`MaxPoolMembersPerPool`].",
        "module_prefix": "NominationPools",
        "module_name": "NominationPools",
        "spec_version": 9280
    },
    {
        "call_name": "update_roles",
        "call_args": [
            {
                "name": "pool_id",
                "type": 4,
                "typeName": "PoolId",
                "docs": []
            },
            {
                "name": "new_root",
                "type": 372,
                "typeName": "ConfigOp<T::AccountId>",
                "docs": []
            },
            {
                "name": "new_nominator",
                "type": 372,
                "typeName": "ConfigOp<T::AccountId>",
                "docs": []
            },
            {
                "name": "new_state_toggler",
                "type": 372,
                "typeName": "ConfigOp<T::AccountId>",
                "docs": []
            }
        ],
        "documentation": "Update the roles of the pool.\n\nThe root is the only entity that can change any of the roles, including itself,\nexcluding the depositor, who can never change.\n\nIt emits an event, notifying UIs of the role change. This event is quite relevant to\nmost pool members and they should be informed of changes to pool roles.",
        "module_prefix": "NominationPools",
        "module_name": "NominationPools",
        "spec_version": 9280
    },
    {
        "call_name": "chill",
        "call_args": [
            {
                "name": "pool_id",
                "type": 4,
                "typeName": "PoolId",
                "docs": []
            }
        ],
        "documentation": "Chill on behalf of the pool.\n\nThe dispatch origin of this call must be signed by the pool nominator or the pool\nroot role, same as [`Pallet::nominate`].\n\nThis directly forward the call to the staking pallet, on behalf of the pool bonded\naccount.",
        "module_prefix": "NominationPools",
        "module_name": "NominationPools",
        "spec_version": 9280
    },
    {
        "call_name": "set_validation_upgrade_cooldown",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            }
        ],
        "documentation": "Set the validation upgrade cooldown.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_validation_upgrade_delay",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            }
        ],
        "documentation": "Set the validation upgrade delay.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_code_retention_period",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            }
        ],
        "documentation": "Set the acceptance period for an included candidate.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_max_code_size",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Set the max validation code size for incoming upgrades.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_max_pov_size",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Set the max POV block size for incoming upgrades.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_max_head_data_size",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Set the max head data size for paras.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_parathread_cores",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Set the number of parathread execution cores.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_parathread_retries",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Set the number of retries for a particular parathread.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_group_rotation_frequency",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            }
        ],
        "documentation": "Set the parachain validator-group rotation frequency",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_chain_availability_period",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            }
        ],
        "documentation": "Set the availability period for parachains.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_thread_availability_period",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            }
        ],
        "documentation": "Set the availability period for parathreads.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_scheduling_lookahead",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Set the scheduling lookahead, in expected number of blocks at peak throughput.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_max_validators_per_core",
        "call_args": [
            {
                "name": "new",
                "type": 235,
                "typeName": "Option<u32>",
                "docs": []
            }
        ],
        "documentation": "Set the maximum number of validators to assign to any core.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_max_validators",
        "call_args": [
            {
                "name": "new",
                "type": 235,
                "typeName": "Option<u32>",
                "docs": []
            }
        ],
        "documentation": "Set the maximum number of validators to use in parachain consensus.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_dispute_period",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "SessionIndex",
                "docs": []
            }
        ],
        "documentation": "Set the dispute period, in number of sessions to keep for disputes.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_dispute_post_conclusion_acceptance_period",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            }
        ],
        "documentation": "Set the dispute post conclusion acceptance period.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_dispute_max_spam_slots",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Set the maximum number of dispute spam slots.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_dispute_conclusion_by_time_out_period",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            }
        ],
        "documentation": "Set the dispute conclusion by time out period.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_no_show_slots",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Set the no show slots, in number of number of consensus slots.\nMust be at least 1.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_n_delay_tranches",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Set the total number of delay tranches.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_zeroth_delay_tranche_width",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Set the zeroth delay tranche width.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_needed_approvals",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Set the number of validators needed to approve a block.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_relay_vrf_modulo_samples",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Set the number of samples to do of the `RelayVRFModulo` approval assignment criterion.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_max_upward_queue_count",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Sets the maximum items that can present in a upward dispatch queue at once.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_max_upward_queue_size",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Sets the maximum total size of items that can present in a upward dispatch queue at once.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_max_downward_message_size",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Set the critical downward message size.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_ump_service_total_weight",
        "call_args": [
            {
                "name": "new",
                "type": 8,
                "typeName": "Weight",
                "docs": []
            }
        ],
        "documentation": "Sets the soft limit for the phase of dispatching dispatchable upward messages.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_max_upward_message_size",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Sets the maximum size of an upward message that can be sent by a candidate.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_max_upward_message_num_per_candidate",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Sets the maximum number of messages that a candidate can contain.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_hrmp_open_request_ttl",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Sets the number of sessions after which an HRMP open channel request expires.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_hrmp_sender_deposit",
        "call_args": [
            {
                "name": "new",
                "type": 6,
                "typeName": "Balance",
                "docs": []
            }
        ],
        "documentation": "Sets the amount of funds that the sender should provide for opening an HRMP channel.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_hrmp_recipient_deposit",
        "call_args": [
            {
                "name": "new",
                "type": 6,
                "typeName": "Balance",
                "docs": []
            }
        ],
        "documentation": "Sets the amount of funds that the recipient should provide for accepting opening an HRMP\nchannel.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_hrmp_channel_max_capacity",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Sets the maximum number of messages allowed in an HRMP channel at once.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_hrmp_channel_max_total_size",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Sets the maximum total size of messages in bytes allowed in an HRMP channel at once.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_hrmp_max_parachain_inbound_channels",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Sets the maximum number of inbound HRMP channels a parachain is allowed to accept.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_hrmp_max_parathread_inbound_channels",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Sets the maximum number of inbound HRMP channels a parathread is allowed to accept.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_hrmp_channel_max_message_size",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Sets the maximum size of a message that could ever be put into an HRMP channel.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_hrmp_max_parachain_outbound_channels",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Sets the maximum number of outbound HRMP channels a parachain is allowed to open.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_hrmp_max_parathread_outbound_channels",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Sets the maximum number of outbound HRMP channels a parathread is allowed to open.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_hrmp_max_message_num_per_candidate",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Sets the maximum number of outbound HRMP messages can be sent by a candidate.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_ump_max_individual_weight",
        "call_args": [
            {
                "name": "new",
                "type": 8,
                "typeName": "Weight",
                "docs": []
            }
        ],
        "documentation": "Sets the maximum amount of weight any individual upward message may consume.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_pvf_checking_enabled",
        "call_args": [
            {
                "name": "new",
                "type": 42,
                "typeName": "bool",
                "docs": []
            }
        ],
        "documentation": "Enable or disable PVF pre-checking. Consult the field documentation prior executing.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_pvf_voting_ttl",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "SessionIndex",
                "docs": []
            }
        ],
        "documentation": "Set the number of session changes after which a PVF pre-checking voting is rejected.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_minimum_validation_upgrade_delay",
        "call_args": [
            {
                "name": "new",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            }
        ],
        "documentation": "Sets the minimum delay between announcing the upgrade block for a parachain until the\nupgrade taking place.\n\nSee the field documentation for information and constraints for the new value.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "set_bypass_consistency_check",
        "call_args": [
            {
                "name": "new",
                "type": 42,
                "typeName": "bool",
                "docs": []
            }
        ],
        "documentation": "Setting this to true will disable consistency checks for the configuration setters.\nUse with caution.",
        "module_prefix": "Configuration",
        "module_name": "Configuration",
        "spec_version": 9280
    },
    {
        "call_name": "enter",
        "call_args": [
            {
                "name": "data",
                "type": 377,
                "typeName": "ParachainsInherentData<T::Header>",
                "docs": []
            }
        ],
        "documentation": "Enter the paras inherent. This will process bitfields and backed candidates.",
        "module_prefix": "ParaInherent",
        "module_name": "ParaInherent",
        "spec_version": 9280
    },
    {
        "call_name": "force_set_current_code",
        "call_args": [
            {
                "name": "para",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "new_code",
                "type": 392,
                "typeName": "ValidationCode",
                "docs": []
            }
        ],
        "documentation": "Set the storage for the parachain validation code immediately.",
        "module_prefix": "Paras",
        "module_name": "Paras",
        "spec_version": 9280
    },
    {
        "call_name": "force_set_current_head",
        "call_args": [
            {
                "name": "para",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "new_head",
                "type": 102,
                "typeName": "HeadData",
                "docs": []
            }
        ],
        "documentation": "Set the storage for the current parachain head data immediately.",
        "module_prefix": "Paras",
        "module_name": "Paras",
        "spec_version": 9280
    },
    {
        "call_name": "force_schedule_code_upgrade",
        "call_args": [
            {
                "name": "para",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "new_code",
                "type": 392,
                "typeName": "ValidationCode",
                "docs": []
            },
            {
                "name": "relay_parent_number",
                "type": 4,
                "typeName": "T::BlockNumber",
                "docs": []
            }
        ],
        "documentation": "Schedule an upgrade as if it was scheduled in the given relay parent block.",
        "module_prefix": "Paras",
        "module_name": "Paras",
        "spec_version": 9280
    },
    {
        "call_name": "force_note_new_head",
        "call_args": [
            {
                "name": "para",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "new_head",
                "type": 102,
                "typeName": "HeadData",
                "docs": []
            }
        ],
        "documentation": "Note a new block head for para within the context of the current block.",
        "module_prefix": "Paras",
        "module_name": "Paras",
        "spec_version": 9280
    },
    {
        "call_name": "force_queue_action",
        "call_args": [
            {
                "name": "para",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            }
        ],
        "documentation": "Put a parachain directly into the next session's action queue.\nWe can't queue it any sooner than this without going into the\ninitializer...",
        "module_prefix": "Paras",
        "module_name": "Paras",
        "spec_version": 9280
    },
    {
        "call_name": "add_trusted_validation_code",
        "call_args": [
            {
                "name": "validation_code",
                "type": 392,
                "typeName": "ValidationCode",
                "docs": []
            }
        ],
        "documentation": "Adds the validation code to the storage.\n\nThe code will not be added if it is already present. Additionally, if PVF pre-checking\nis running for that code, it will be instantly accepted.\n\nOtherwise, the code will be added into the storage. Note that the code will be added\ninto storage with reference count 0. This is to account the fact that there are no users\nfor this code yet. The caller will have to make sure that this code eventually gets\nused by some parachain or removed from the storage to avoid storage leaks. For the latter\nprefer to use the `poke_unused_validation_code` dispatchable to raw storage manipulation.\n\nThis function is mainly meant to be used for upgrading parachains that do not follow\nthe go-ahead signal while the PVF pre-checking feature is enabled.",
        "module_prefix": "Paras",
        "module_name": "Paras",
        "spec_version": 9280
    },
    {
        "call_name": "poke_unused_validation_code",
        "call_args": [
            {
                "name": "validation_code_hash",
                "type": 101,
                "typeName": "ValidationCodeHash",
                "docs": []
            }
        ],
        "documentation": "Remove the validation code from the storage iff the reference count is 0.\n\nThis is better than removing the storage directly, because it will not remove the code\nthat was suddenly got used by some parachain while this dispatchable was pending\ndispatching.",
        "module_prefix": "Paras",
        "module_name": "Paras",
        "spec_version": 9280
    },
    {
        "call_name": "include_pvf_check_statement",
        "call_args": [
            {
                "name": "stmt",
                "type": 403,
                "typeName": "PvfCheckStatement",
                "docs": []
            },
            {
                "name": "signature",
                "type": 384,
                "typeName": "ValidatorSignature",
                "docs": []
            }
        ],
        "documentation": "Includes a statement for a PVF pre-checking vote. Potentially, finalizes the vote and\nenacts the results if that was the last vote before achieving the supermajority.",
        "module_prefix": "Paras",
        "module_name": "Paras",
        "spec_version": 9280
    },
    {
        "call_name": "force_approve",
        "call_args": [
            {
                "name": "up_to",
                "type": 4,
                "typeName": "BlockNumber",
                "docs": []
            }
        ],
        "documentation": "Issue a signal to the consensus engine to forcibly act as though all parachain\nblocks in all relay chain blocks up to and including the given number in the current\nchain are valid and should be finalized.",
        "module_prefix": "Initializer",
        "module_name": "Initializer",
        "spec_version": 9280
    },
    {
        "call_name": "service_overweight",
        "call_args": [
            {
                "name": "index",
                "type": 8,
                "typeName": "OverweightIndex",
                "docs": []
            },
            {
                "name": "weight_limit",
                "type": 8,
                "typeName": "Weight",
                "docs": []
            }
        ],
        "documentation": "Service a single overweight upward message.\n\n- `origin`: Must pass `ExecuteOverweightOrigin`.\n- `index`: The index of the overweight message to service.\n- `weight_limit`: The amount of weight that message execution may take.\n\nErrors:\n- `UnknownMessageIndex`: Message of `index` is unknown.\n- `WeightOverLimit`: Message execution may use greater than `weight_limit`.\n\nEvents:\n- `OverweightServiced`: On success.",
        "module_prefix": "Ump",
        "module_name": "Ump",
        "spec_version": 9280
    },
    {
        "call_name": "hrmp_init_open_channel",
        "call_args": [
            {
                "name": "recipient",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "proposed_max_capacity",
                "type": 4,
                "typeName": "u32",
                "docs": []
            },
            {
                "name": "proposed_max_message_size",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Initiate opening a channel from a parachain to a given recipient with given channel\nparameters.\n\n- `proposed_max_capacity` - specifies how many messages can be in the channel at once.\n- `proposed_max_message_size` - specifies the maximum size of the messages.\n\nThese numbers are a subject to the relay-chain configuration limits.\n\nThe channel can be opened only after the recipient confirms it and only on a session\nchange.",
        "module_prefix": "Hrmp",
        "module_name": "Hrmp",
        "spec_version": 9280
    },
    {
        "call_name": "hrmp_accept_open_channel",
        "call_args": [
            {
                "name": "sender",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            }
        ],
        "documentation": "Accept a pending open channel request from the given sender.\n\nThe channel will be opened only on the next session boundary.",
        "module_prefix": "Hrmp",
        "module_name": "Hrmp",
        "spec_version": 9280
    },
    {
        "call_name": "hrmp_close_channel",
        "call_args": [
            {
                "name": "channel_id",
                "type": 110,
                "typeName": "HrmpChannelId",
                "docs": []
            }
        ],
        "documentation": "Initiate unilateral closing of a channel. The origin must be either the sender or the\nrecipient in the channel being closed.\n\nThe closure can only happen on a session change.",
        "module_prefix": "Hrmp",
        "module_name": "Hrmp",
        "spec_version": 9280
    },
    {
        "call_name": "force_clean_hrmp",
        "call_args": [
            {
                "name": "para",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "inbound",
                "type": 4,
                "typeName": "u32",
                "docs": []
            },
            {
                "name": "outbound",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "This extrinsic triggers the cleanup of all the HRMP storage items that\na para may have. Normally this happens once per session, but this allows\nyou to trigger the cleanup immediately for a specific parachain.\n\nOrigin must be Root.\n\nNumber of inbound and outbound channels for `para` must be provided as witness data of weighing.",
        "module_prefix": "Hrmp",
        "module_name": "Hrmp",
        "spec_version": 9280
    },
    {
        "call_name": "force_process_hrmp_open",
        "call_args": [
            {
                "name": "channels",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Force process HRMP open channel requests.\n\nIf there are pending HRMP open channel requests, you can use this\nfunction process all of those requests immediately.\n\nTotal number of opening channels must be provided as witness data of weighing.",
        "module_prefix": "Hrmp",
        "module_name": "Hrmp",
        "spec_version": 9280
    },
    {
        "call_name": "force_process_hrmp_close",
        "call_args": [
            {
                "name": "channels",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Force process HRMP close channel requests.\n\nIf there are pending HRMP close channel requests, you can use this\nfunction process all of those requests immediately.\n\nTotal number of closing channels must be provided as witness data of weighing.",
        "module_prefix": "Hrmp",
        "module_name": "Hrmp",
        "spec_version": 9280
    },
    {
        "call_name": "hrmp_cancel_open_request",
        "call_args": [
            {
                "name": "channel_id",
                "type": 110,
                "typeName": "HrmpChannelId",
                "docs": []
            },
            {
                "name": "open_requests",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "This cancels a pending open channel request. It can be canceled by either of the sender\nor the recipient for that request. The origin must be either of those.\n\nThe cancellation happens immediately. It is not possible to cancel the request if it is\nalready accepted.\n\nTotal number of open requests (i.e. `HrmpOpenChannelRequestsList`) must be provided as\nwitness data.",
        "module_prefix": "Hrmp",
        "module_name": "Hrmp",
        "spec_version": 9280
    },
    {
        "call_name": "force_unfreeze",
        "call_args": [],
        "documentation": "",
        "module_prefix": "ParasDisputes",
        "module_name": "ParasDisputes",
        "spec_version": 9280
    },
    {
        "call_name": "register",
        "call_args": [
            {
                "name": "id",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "genesis_head",
                "type": 102,
                "typeName": "HeadData",
                "docs": []
            },
            {
                "name": "validation_code",
                "type": 392,
                "typeName": "ValidationCode",
                "docs": []
            }
        ],
        "documentation": "Register head data and validation code for a reserved Para Id.\n\n## Arguments\n- `origin`: Must be called by a `Signed` origin.\n- `id`: The para ID. Must be owned/managed by the `origin` signing account.\n- `genesis_head`: The genesis head data of the parachain/thread.\n- `validation_code`: The initial validation code of the parachain/thread.\n\n## Deposits/Fees\nThe origin signed account must reserve a corresponding deposit for the registration. Anything already\nreserved previously for this para ID is accounted for.\n\n## Events\nThe `Registered` event is emitted in case of success.",
        "module_prefix": "Registrar",
        "module_name": "Registrar",
        "spec_version": 9280
    },
    {
        "call_name": "force_register",
        "call_args": [
            {
                "name": "who",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "deposit",
                "type": 6,
                "typeName": "BalanceOf<T>",
                "docs": []
            },
            {
                "name": "id",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "genesis_head",
                "type": 102,
                "typeName": "HeadData",
                "docs": []
            },
            {
                "name": "validation_code",
                "type": 392,
                "typeName": "ValidationCode",
                "docs": []
            }
        ],
        "documentation": "Force the registration of a Para Id on the relay chain.\n\nThis function must be called by a Root origin.\n\nThe deposit taken can be specified for this registration. Any `ParaId`\ncan be registered, including sub-1000 IDs which are System Parachains.",
        "module_prefix": "Registrar",
        "module_name": "Registrar",
        "spec_version": 9280
    },
    {
        "call_name": "deregister",
        "call_args": [
            {
                "name": "id",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            }
        ],
        "documentation": "Deregister a Para Id, freeing all data and returning any deposit.\n\nThe caller must be Root, the `para` owner, or the `para` itself. The para must be a parathread.",
        "module_prefix": "Registrar",
        "module_name": "Registrar",
        "spec_version": 9280
    },
    {
        "call_name": "swap",
        "call_args": [
            {
                "name": "id",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "other",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            }
        ],
        "documentation": "Swap a parachain with another parachain or parathread.\n\nThe origin must be Root, the `para` owner, or the `para` itself.\n\nThe swap will happen only if there is already an opposite swap pending. If there is not,\nthe swap will be stored in the pending swaps map, ready for a later confirmatory swap.\n\nThe `ParaId`s remain mapped to the same head data and code so external code can rely on\n`ParaId` to be a long-term identifier of a notional \"parachain\". However, their\nscheduling info (i.e. whether they're a parathread or parachain), auction information\nand the auction deposit are switched.",
        "module_prefix": "Registrar",
        "module_name": "Registrar",
        "spec_version": 9280
    },
    {
        "call_name": "force_remove_lock",
        "call_args": [
            {
                "name": "para",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            }
        ],
        "documentation": "Remove a manager lock from a para. This will allow the manager of a\npreviously locked para to deregister or swap a para without using governance.\n\nCan only be called by the Root origin.",
        "module_prefix": "Registrar",
        "module_name": "Registrar",
        "spec_version": 9280
    },
    {
        "call_name": "reserve",
        "call_args": [],
        "documentation": "Reserve a Para Id on the relay chain.\n\nThis function will reserve a new Para Id to be owned/managed by the origin account.\nThe origin account is able to register head data and validation code using `register` to create\na parathread. Using the Slots pallet, a parathread can then be upgraded to get a parachain slot.\n\n## Arguments\n- `origin`: Must be called by a `Signed` origin. Becomes the manager/owner of the new para ID.\n\n## Deposits/Fees\nThe origin must reserve a deposit of `ParaDeposit` for the registration.\n\n## Events\nThe `Reserved` event is emitted in case of success, which provides the ID reserved for use.",
        "module_prefix": "Registrar",
        "module_name": "Registrar",
        "spec_version": 9280
    },
    {
        "call_name": "force_lease",
        "call_args": [
            {
                "name": "para",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "leaser",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "amount",
                "type": 6,
                "typeName": "BalanceOf<T>",
                "docs": []
            },
            {
                "name": "period_begin",
                "type": 4,
                "typeName": "LeasePeriodOf<T>",
                "docs": []
            },
            {
                "name": "period_count",
                "type": 4,
                "typeName": "LeasePeriodOf<T>",
                "docs": []
            }
        ],
        "documentation": "Just a connect into the `lease_out` call, in case Root wants to force some lease to happen\nindependently of any other on-chain mechanism to use it.\n\nThe dispatch origin for this call must match `T::ForceOrigin`.",
        "module_prefix": "Slots",
        "module_name": "Slots",
        "spec_version": 9280
    },
    {
        "call_name": "clear_all_leases",
        "call_args": [
            {
                "name": "para",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            }
        ],
        "documentation": "Clear all leases for a Para Id, refunding any deposits back to the original owners.\n\nThe dispatch origin for this call must match `T::ForceOrigin`.",
        "module_prefix": "Slots",
        "module_name": "Slots",
        "spec_version": 9280
    },
    {
        "call_name": "trigger_onboard",
        "call_args": [
            {
                "name": "para",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            }
        ],
        "documentation": "Try to onboard a parachain that has a lease for the current lease period.\n\nThis function can be useful if there was some state issue with a para that should\nhave onboarded, but was unable to. As long as they have a lease period, we can\nlet them onboard from here.\n\nOrigin must be signed, but can be called by anyone.",
        "module_prefix": "Slots",
        "module_name": "Slots",
        "spec_version": 9280
    },
    {
        "call_name": "new_auction",
        "call_args": [
            {
                "name": "duration",
                "type": 123,
                "typeName": "T::BlockNumber",
                "docs": []
            },
            {
                "name": "lease_period_index",
                "type": 123,
                "typeName": "LeasePeriodOf<T>",
                "docs": []
            }
        ],
        "documentation": "Create a new auction.\n\nThis can only happen when there isn't already an auction in progress and may only be\ncalled by the root origin. Accepts the `duration` of this auction and the\n`lease_period_index` of the initial lease period of the four that are to be auctioned.",
        "module_prefix": "Auctions",
        "module_name": "Auctions",
        "spec_version": 9280
    },
    {
        "call_name": "bid",
        "call_args": [
            {
                "name": "para",
                "type": 412,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "auction_index",
                "type": 123,
                "typeName": "AuctionIndex",
                "docs": []
            },
            {
                "name": "first_slot",
                "type": 123,
                "typeName": "LeasePeriodOf<T>",
                "docs": []
            },
            {
                "name": "last_slot",
                "type": 123,
                "typeName": "LeasePeriodOf<T>",
                "docs": []
            },
            {
                "name": "amount",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            }
        ],
        "documentation": "Make a new bid from an account (including a parachain account) for deploying a new\nparachain.\n\nMultiple simultaneous bids from the same bidder are allowed only as long as all active\nbids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.\n\n- `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and\nfunded by) the same account.\n- `auction_index` is the index of the auction to bid on. Should just be the present\nvalue of `AuctionCounter`.\n- `first_slot` is the first lease period index of the range to bid on. This is the\nabsolute lease period index value, not an auction-specific offset.\n- `last_slot` is the last lease period index of the range to bid on. This is the\nabsolute lease period index value, not an auction-specific offset.\n- `amount` is the amount to bid to be held as deposit for the parachain should the\nbid win. This amount is held throughout the range.",
        "module_prefix": "Auctions",
        "module_name": "Auctions",
        "spec_version": 9280
    },
    {
        "call_name": "cancel_auction",
        "call_args": [],
        "documentation": "Cancel an in-progress auction.\n\nCan only be called by Root origin.",
        "module_prefix": "Auctions",
        "module_name": "Auctions",
        "spec_version": 9280
    },
    {
        "call_name": "create",
        "call_args": [
            {
                "name": "index",
                "type": 412,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "cap",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            },
            {
                "name": "first_period",
                "type": 123,
                "typeName": "LeasePeriodOf<T>",
                "docs": []
            },
            {
                "name": "last_period",
                "type": 123,
                "typeName": "LeasePeriodOf<T>",
                "docs": []
            },
            {
                "name": "end",
                "type": 123,
                "typeName": "T::BlockNumber",
                "docs": []
            },
            {
                "name": "verifier",
                "type": 414,
                "typeName": "Option<MultiSigner>",
                "docs": []
            }
        ],
        "documentation": "Create a new crowdloaning campaign for a parachain slot with the given lease period range.\n\nThis applies a lock to your parachain configuration, ensuring that it cannot be changed\nby the parachain manager.",
        "module_prefix": "Crowdloan",
        "module_name": "Crowdloan",
        "spec_version": 9280
    },
    {
        "call_name": "contribute",
        "call_args": [
            {
                "name": "index",
                "type": 412,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "value",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            },
            {
                "name": "signature",
                "type": 418,
                "typeName": "Option<MultiSignature>",
                "docs": []
            }
        ],
        "documentation": "Contribute to a crowd sale. This will transfer some balance over to fund a parachain\nslot. It will be withdrawable when the crowdloan has ended and the funds are unused.",
        "module_prefix": "Crowdloan",
        "module_name": "Crowdloan",
        "spec_version": 9280
    },
    {
        "call_name": "withdraw",
        "call_args": [
            {
                "name": "who",
                "type": 0,
                "typeName": "T::AccountId",
                "docs": []
            },
            {
                "name": "index",
                "type": 412,
                "typeName": "ParaId",
                "docs": []
            }
        ],
        "documentation": "Withdraw full balance of a specific contributor.\n\nOrigin must be signed, but can come from anyone.\n\nThe fund must be either in, or ready for, retirement. For a fund to be *in* retirement, then the retirement\nflag must be set. For a fund to be ready for retirement, then:\n- it must not already be in retirement;\n- the amount of raised funds must be bigger than the _free_ balance of the account;\n- and either:\n  - the block number must be at least `end`; or\n  - the current lease period must be greater than the fund's `last_period`.\n\nIn this case, the fund's retirement flag is set and its `end` is reset to the current block\nnumber.\n\n- `who`: The account whose contribution should be withdrawn.\n- `index`: The parachain to whose crowdloan the contribution was made.",
        "module_prefix": "Crowdloan",
        "module_name": "Crowdloan",
        "spec_version": 9280
    },
    {
        "call_name": "refund",
        "call_args": [
            {
                "name": "index",
                "type": 412,
                "typeName": "ParaId",
                "docs": []
            }
        ],
        "documentation": "Automatically refund contributors of an ended crowdloan.\nDue to weight restrictions, this function may need to be called multiple\ntimes to fully refund all users. We will refund `RemoveKeysLimit` users at a time.\n\nOrigin must be signed, but can come from anyone.",
        "module_prefix": "Crowdloan",
        "module_name": "Crowdloan",
        "spec_version": 9280
    },
    {
        "call_name": "dissolve",
        "call_args": [
            {
                "name": "index",
                "type": 412,
                "typeName": "ParaId",
                "docs": []
            }
        ],
        "documentation": "Remove a fund after the retirement period has ended and all funds have been returned.",
        "module_prefix": "Crowdloan",
        "module_name": "Crowdloan",
        "spec_version": 9280
    },
    {
        "call_name": "edit",
        "call_args": [
            {
                "name": "index",
                "type": 412,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "cap",
                "type": 57,
                "typeName": "BalanceOf<T>",
                "docs": []
            },
            {
                "name": "first_period",
                "type": 123,
                "typeName": "LeasePeriodOf<T>",
                "docs": []
            },
            {
                "name": "last_period",
                "type": 123,
                "typeName": "LeasePeriodOf<T>",
                "docs": []
            },
            {
                "name": "end",
                "type": 123,
                "typeName": "T::BlockNumber",
                "docs": []
            },
            {
                "name": "verifier",
                "type": 414,
                "typeName": "Option<MultiSigner>",
                "docs": []
            }
        ],
        "documentation": "Edit the configuration for an in-progress crowdloan.\n\nCan only be called by Root origin.",
        "module_prefix": "Crowdloan",
        "module_name": "Crowdloan",
        "spec_version": 9280
    },
    {
        "call_name": "add_memo",
        "call_args": [
            {
                "name": "index",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "memo",
                "type": 10,
                "typeName": "Vec<u8>",
                "docs": []
            }
        ],
        "documentation": "Add an optional memo to an existing crowdloan contribution.\n\nOrigin must be Signed, and the user must have contributed to the crowdloan.",
        "module_prefix": "Crowdloan",
        "module_name": "Crowdloan",
        "spec_version": 9280
    },
    {
        "call_name": "poke",
        "call_args": [
            {
                "name": "index",
                "type": 96,
                "typeName": "ParaId",
                "docs": []
            }
        ],
        "documentation": "Poke the fund into `NewRaise`\n\nOrigin must be Signed, and the fund has non-zero raise.",
        "module_prefix": "Crowdloan",
        "module_name": "Crowdloan",
        "spec_version": 9280
    },
    {
        "call_name": "contribute_all",
        "call_args": [
            {
                "name": "index",
                "type": 412,
                "typeName": "ParaId",
                "docs": []
            },
            {
                "name": "signature",
                "type": 418,
                "typeName": "Option<MultiSignature>",
                "docs": []
            }
        ],
        "documentation": "Contribute your entire balance to a crowd sale. This will transfer the entire balance of a user over to fund a parachain\nslot. It will be withdrawable when the crowdloan has ended and the funds are unused.",
        "module_prefix": "Crowdloan",
        "module_name": "Crowdloan",
        "spec_version": 9280
    },
    {
        "call_name": "send",
        "call_args": [
            {
                "name": "dest",
                "type": 154,
                "typeName": "Box<VersionedMultiLocation>",
                "docs": []
            },
            {
                "name": "message",
                "type": 422,
                "typeName": "Box<VersionedXcm<()>>",
                "docs": []
            }
        ],
        "documentation": "",
        "module_prefix": "XcmPallet",
        "module_name": "XcmPallet",
        "spec_version": 9280
    },
    {
        "call_name": "teleport_assets",
        "call_args": [
            {
                "name": "dest",
                "type": 154,
                "typeName": "Box<VersionedMultiLocation>",
                "docs": []
            },
            {
                "name": "beneficiary",
                "type": 154,
                "typeName": "Box<VersionedMultiLocation>",
                "docs": []
            },
            {
                "name": "assets",
                "type": 149,
                "typeName": "Box<VersionedMultiAssets>",
                "docs": []
            },
            {
                "name": "fee_asset_item",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Teleport some assets from the local chain to some destination chain.\n\nFee payment on the destination side is made from the asset in the `assets` vector of\nindex `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,\nwith all fees taken as needed from the asset.\n\n- `origin`: Must be capable of withdrawing the `assets` and executing XCM.\n- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send\n  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.\n- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be\n  an `AccountId32` value.\n- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the\n  `dest` side. May not be empty.\n- `fee_asset_item`: The index into `assets` of the item which should be used to pay\n  fees.",
        "module_prefix": "XcmPallet",
        "module_name": "XcmPallet",
        "spec_version": 9280
    },
    {
        "call_name": "reserve_transfer_assets",
        "call_args": [
            {
                "name": "dest",
                "type": 154,
                "typeName": "Box<VersionedMultiLocation>",
                "docs": []
            },
            {
                "name": "beneficiary",
                "type": 154,
                "typeName": "Box<VersionedMultiLocation>",
                "docs": []
            },
            {
                "name": "assets",
                "type": 149,
                "typeName": "Box<VersionedMultiAssets>",
                "docs": []
            },
            {
                "name": "fee_asset_item",
                "type": 4,
                "typeName": "u32",
                "docs": []
            }
        ],
        "documentation": "Transfer some assets from the local chain to the sovereign account of a destination\nchain and forward a notification XCM.\n\nFee payment on the destination side is made from the asset in the `assets` vector of\nindex `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,\nwith all fees taken as needed from the asset.\n\n- `origin`: Must be capable of withdrawing the `assets` and executing XCM.\n- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send\n  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.\n- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be\n  an `AccountId32` value.\n- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the\n  `dest` side.\n- `fee_asset_item`: The index into `assets` of the item which should be used to pay\n  fees.",
        "module_prefix": "XcmPallet",
        "module_name": "XcmPallet",
        "spec_version": 9280
    },
    {
        "call_name": "execute",
        "call_args": [
            {
                "name": "message",
                "type": 433,
                "typeName": "Box<VersionedXcm<<T as SysConfig>::Call>>",
                "docs": []
            },
            {
                "name": "max_weight",
                "type": 8,
                "typeName": "Weight",
                "docs": []
            }
        ],
        "documentation": "Execute an XCM message from a local, signed, origin.\n\nAn event is deposited indicating whether `msg` could be executed completely or only\npartially.\n\nNo more than `max_weight` will be used in its attempted execution. If this is less than the\nmaximum amount of weight that the message could take to be executed, then no execution\nattempt will be made.\n\nNOTE: A successful return to this does *not* imply that the `msg` was executed successfully\nto completion; only that *some* of it was executed.",
        "module_prefix": "XcmPallet",
        "module_name": "XcmPallet",
        "spec_version": 9280
    },
    {
        "call_name": "force_xcm_version",
        "call_args": [
            {
                "name": "location",
                "type": 120,
                "typeName": "Box<MultiLocation>",
                "docs": []
            },
            {
                "name": "xcm_version",
                "type": 4,
                "typeName": "XcmVersion",
                "docs": []
            }
        ],
        "documentation": "Extoll that a particular destination can be communicated with through a particular\nversion of XCM.\n\n- `origin`: Must be Root.\n- `location`: The destination that is being described.\n- `xcm_version`: The latest version of XCM that `location` supports.",
        "module_prefix": "XcmPallet",
        "module_name": "XcmPallet",
        "spec_version": 9280
    },
    {
        "call_name": "force_default_xcm_version",
        "call_args": [
            {
                "name": "maybe_xcm_version",
                "type": 235,
                "typeName": "Option<XcmVersion>",
                "docs": []
            }
        ],
        "documentation": "Set a safe XCM version (the version that XCM should be encoded with if the most recent\nversion a destination can accept is unknown).\n\n- `origin`: Must be Root.\n- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable.",
        "module_prefix": "XcmPallet",
        "module_name": "XcmPallet",
        "spec_version": 9280
    },
    {
        "call_name": "force_subscribe_version_notify",
        "call_args": [
            {
                "name": "location",
                "type": 154,
                "typeName": "Box<VersionedMultiLocation>",
                "docs": []
            }
        ],
        "documentation": "Ask a location to notify us regarding their XCM version and any changes to it.\n\n- `origin`: Must be Root.\n- `location`: The location to which we should subscribe for XCM version notifications.",
        "module_prefix": "XcmPallet",
        "module_name": "XcmPallet",
        "spec_version": 9280
    },
    {
        "call_name": "force_unsubscribe_version_notify",
        "call_args": [
            {
                "name": "location",
                "type": 154,
                "typeName": "Box<VersionedMultiLocation>",
                "docs": []
            }
        ],
        "documentation": "Require that a particular destination should no longer notify us regarding any XCM\nversion changes.\n\n- `origin`: Must be Root.\n- `location`: The location to which we are currently subscribed for XCM version\n  notifications which we no longer desire.",
        "module_prefix": "XcmPallet",
        "module_name": "XcmPallet",
        "spec_version": 9280
    },
    {
        "call_name": "limited_reserve_transfer_assets",
        "call_args": [
            {
                "name": "dest",
                "type": 154,
                "typeName": "Box<VersionedMultiLocation>",
                "docs": []
            },
            {
                "name": "beneficiary",
                "type": 154,
                "typeName": "Box<VersionedMultiLocation>",
                "docs": []
            },
            {
                "name": "assets",
                "type": 149,
                "typeName": "Box<VersionedMultiAssets>",
                "docs": []
            },
            {
                "name": "fee_asset_item",
                "type": 4,
                "typeName": "u32",
                "docs": []
            },
            {
                "name": "weight_limit",
                "type": 147,
                "typeName": "WeightLimit",
                "docs": []
            }
        ],
        "documentation": "Transfer some assets from the local chain to the sovereign account of a destination\nchain and forward a notification XCM.\n\nFee payment on the destination side is made from the asset in the `assets` vector of\nindex `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight\nis needed than `weight_limit`, then the operation will fail and the assets send may be\nat risk.\n\n- `origin`: Must be capable of withdrawing the `assets` and executing XCM.\n- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send\n  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.\n- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be\n  an `AccountId32` value.\n- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the\n  `dest` side.\n- `fee_asset_item`: The index into `assets` of the item which should be used to pay\n  fees.\n- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.",
        "module_prefix": "XcmPallet",
        "module_name": "XcmPallet",
        "spec_version": 9280
    },
    {
        "call_name": "limited_teleport_assets",
        "call_args": [
            {
                "name": "dest",
                "type": 154,
                "typeName": "Box<VersionedMultiLocation>",
                "docs": []
            },
            {
                "name": "beneficiary",
                "type": 154,
                "typeName": "Box<VersionedMultiLocation>",
                "docs": []
            },
            {
                "name": "assets",
                "type": 149,
                "typeName": "Box<VersionedMultiAssets>",
                "docs": []
            },
            {
                "name": "fee_asset_item",
                "type": 4,
                "typeName": "u32",
                "docs": []
            },
            {
                "name": "weight_limit",
                "type": 147,
                "typeName": "WeightLimit",
                "docs": []
            }
        ],
        "documentation": "Teleport some assets from the local chain to some destination chain.\n\nFee payment on the destination side is made from the asset in the `assets` vector of\nindex `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight\nis needed than `weight_limit`, then the operation will fail and the assets send may be\nat risk.\n\n- `origin`: Must be capable of withdrawing the `assets` and executing XCM.\n- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send\n  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.\n- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be\n  an `AccountId32` value.\n- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the\n  `dest` side. May not be empty.\n- `fee_asset_item`: The index into `assets` of the item which should be used to pay\n  fees.\n- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.",
        "module_prefix": "XcmPallet",
        "module_name": "XcmPallet",
        "spec_version": 9280
    }
]